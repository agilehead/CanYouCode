//This code was auto-generated by AgileFx Modeler.
//Changes to this file will be lost if the file is regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using System.Text;

using AgileFx.ORM;
using AgileFx.ORM.ObjectComposition;
using AgileFx.ORM.Mapping;
using AgileFx.ORM.Utils;
using AgileFx.ORM.Backends.LinqToSql;

using projectNS = canyoucode.Core.Models;
using intermediateNS = canyoucode.Core.Models.Intermediate;
using L2SNS = canyoucode.Core.Models.L2S;
using pocoNS = canyoucode.Core.Models.POCO;

namespace canyoucode.Core.Models
{
    public class Entities : L2SDataContext
    {
		public Entities() : base("Data Source=.;Initial Catalog=CanYouCodeDb;Integrated Security=True;Connect Timeout=10;User Instance=False")
		{
		}
		
		public Entities(string connectionString) : base(connectionString)
		{
		}
	
        public override System.Data.Linq.DataContext GetLinqToSqlDataContext()
        {
			return new L2SNS.CanYouCodeDb_LinqToSqlDataContext(this.ConnectionString);
        }
		
		public override EntityContext CreateNew()
		{
			return new Entities(this.ConnectionString);
		}
		
		public IQueryable<Account> Account { get { return this.CreateQuery<Account>(); } }
		public IQueryable<AccountAlert> AccountAlert { get { return this.CreateQuery<AccountAlert>(); } }
		public IQueryable<Attachment> Attachment { get { return this.CreateQuery<Attachment>(); } }
		public IQueryable<Bid> Bid { get { return this.CreateQuery<Bid>(); } }
		public IQueryable<Company> Company { get { return this.CreateQuery<Company>(); } }
		public IQueryable<Consultant> Consultant { get { return this.CreateQuery<Consultant>(); } }
		public IQueryable<Credential> Credential { get { return this.CreateQuery<Credential>(); } }
		public IQueryable<Employer> Employer { get { return this.CreateQuery<Employer>(); } }
		public IQueryable<EmployerFeedback> EmployerFeedback { get { return this.CreateQuery<EmployerFeedback>(); } }
		public IQueryable<PortfolioEntry> PortfolioEntry { get { return this.CreateQuery<PortfolioEntry>(); } }
		public IQueryable<ProfileFeedback> ProfileFeedback { get { return this.CreateQuery<ProfileFeedback>(); } }
		public IQueryable<Project> Project { get { return this.CreateQuery<Project>(); } }
		public IQueryable<ProjectInvite> ProjectInvite { get { return this.CreateQuery<ProjectInvite>(); } }
		public IQueryable<Tag> Tag { get { return this.CreateQuery<Tag>(); } }
		public IQueryable<Token> Token { get { return this.CreateQuery<Token>(); } }
		public IQueryable<Tenant> Tenant { get { return this.CreateQuery<Tenant>(); } }
  }
}
	
namespace canyoucode.Core.Models
{
	public class AccountMapping : ModelEntityMapping<projectNS.Account, intermediateNS.Account, L2SNS.Account>
	{
		public AccountMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.AccountAlert>(e => e.Alerts, e => e.Account);
			AddRelationship<projectNS.Employer>(e => e.Employer, e => e.Account);
			AddRelationship<projectNS.Company>(e => e.Company, e => e.Account);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Accounts);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(AccountMapping))]
	public partial class Account : EntityBase, IModelEntity<intermediateNS.Account>	
	{
		private intermediateNS.Account __intermediateEntity;
		public intermediateNS.Account _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Account intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual DateTime DateAdded 
		{	
			get { return _intermediateEntity.DateAdded; }
			set { _intermediateEntity.DateAdded = value; }
		}
		public virtual string Email 
		{	
			get { return _intermediateEntity.Email; }
			set { _intermediateEntity.Email = value; }
		}
		public virtual DateTime LastLoginDate 
		{	
			get { return _intermediateEntity.LastLoginDate; }
			set { _intermediateEntity.LastLoginDate = value; }
		}
		public virtual string Password 
		{	
			get { return _intermediateEntity.Password; }
			set { _intermediateEntity.Password = value; }
		}
		public virtual string Phone 
		{	
			get { return _intermediateEntity.Phone; }
			set { _intermediateEntity.Phone = value; }
		}
		public virtual int Rating 
		{	
			get { return _intermediateEntity.Rating; }
			set { _intermediateEntity.Rating = value; }
		}
		public virtual string Status 
		{	
			get { return _intermediateEntity.Status; }
			set { _intermediateEntity.Status = value; }
		}
		public virtual string Type 
		{	
			get { return _intermediateEntity.Type; }
			set { _intermediateEntity.Type = value; }
		}
		public virtual string Username 
		{	
			get { return _intermediateEntity.Username; }
			set { _intermediateEntity.Username = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.AccountAlert> Alerts 
		{	
			get { return _intermediateEntity.Alerts.EntityCollection; }
		}		
		public Employer Employer 
		{	
			get { return _intermediateEntity.Employer.GetEntity(); }
			set { if (value != null) _intermediateEntity.Employer = value._intermediateEntity; else _intermediateEntity.Employer = null; }
		}
		public Company Company 
		{	
			get { return _intermediateEntity.Company.GetEntity(); }
			set { if (value != null) _intermediateEntity.Company = value._intermediateEntity; else _intermediateEntity.Company = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Account() : this(new intermediateNS.Account())
		{
		}
			
		public Account(intermediateNS.Account intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Account(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Account(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Account, pocoNS.Account>(info);
		}

		public static bool operator ==(Account a, Account b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Account a, Account b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Account)this)._equals(obj as Account);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Account ToPOCO()
		{
			return this.CreatePOCO<Account, pocoNS.Account>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class Account : IPOCO<projectNS.Account>	{


		public long Id { get; set; }
		public DateTime DateAdded { get; set; }
		public string Email { get; set; }
		public DateTime LastLoginDate { get; set; }
		public string Password { get; set; }
		public string Phone { get; set; }
		public int Rating { get; set; }
		public string Status { get; set; }
		public string Type { get; set; }
		public string Username { get; set; }
		public long TenantId { get; set; }
		public POCOCollection Alerts { get; set; }

		public POCOReference Employer { get; set; }

		public POCOReference Company { get; set; }

		public POCOReference Tenant { get; set; }

			
		public Account()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class Account : IntermediateEntity<projectNS.Account, L2SNS.Account>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Account, intermediateNS.Account, L2SNS.Account, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, DateTime> _dateAdded;
		public DateTime DateAdded 
		{	
			get { return _dateAdded.Value; }
			set { _dateAdded.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string> _email;
		public string Email 
		{	
			get { return _email.Value; }
			set { _email.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, DateTime> _lastLoginDate;
		public DateTime LastLoginDate 
		{	
			get { return _lastLoginDate.Value; }
			set { _lastLoginDate.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string> _password;
		public string Password 
		{	
			get { return _password.Value; }
			set { _password.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string> _phone;
		public string Phone 
		{	
			get { return _phone.Value; }
			set { _phone.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, int> _rating;
		public int Rating 
		{	
			get { return _rating.Value; }
			set { _rating.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string> _status;
		public string Status 
		{	
			get { return _status.Value; }
			set { _status.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string> _type;
		public string Type 
		{	
			get { return _type.Value; }
			set { _type.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string> _username;
		public string Username 
		{	
			get { return _username.Value; }
			set { _username.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityCollection<projectNS.Account, projectNS.AccountAlert, intermediateNS.Account, intermediateNS.AccountAlert, L2SNS.Account, L2SNS.AccountAlert> _alerts;
		public IntermediateEntityCollection<projectNS.Account, projectNS.AccountAlert, intermediateNS.Account, intermediateNS.AccountAlert, L2SNS.Account, L2SNS.AccountAlert> Alerts 
		{	
			get { return _alerts; }		
		}				
		public IntermediateEntityReference<projectNS.Account, projectNS.Employer, intermediateNS.Account, intermediateNS.Employer, L2SNS.Account, L2SNS.Employer> _employer;
		public intermediateNS.Employer Employer
		{	
			get { return _employer.Value; }
			set { _employer.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Account, projectNS.Company, intermediateNS.Account, intermediateNS.Company, L2SNS.Account, L2SNS.Company> _company;
		public intermediateNS.Company Company
		{	
			get { return _company.Value; }
			set { _company.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Account, projectNS.Tenant, intermediateNS.Account, intermediateNS.Tenant, L2SNS.Account, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Account()
		{
			__tableEntity = new L2SNS.Account();
			initFields();
		}
		
		public Account(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Account();
			initFields();
			
			this.Deserialize<projectNS.Account, Account, pocoNS.Account>(info);
			
		}
			
		public Account(L2SNS.Account tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Account, intermediateNS.Account, L2SNS.Account, long>(this, t => t.Id, (t, val) => t.Id = val);
			_dateAdded = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, DateTime>(this, t => t.DateAdded, (t, val) => t.DateAdded = val);
			_email = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string>(this, t => t.Email, (t, val) => t.Email = val);
			_lastLoginDate = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, DateTime>(this, t => t.LastLoginDate, (t, val) => t.LastLoginDate = val);
			_password = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string>(this, t => t.Password, (t, val) => t.Password = val);
			_phone = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string>(this, t => t.Phone, (t, val) => t.Phone = val);
			_rating = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, int>(this, t => t.Rating, (t, val) => t.Rating = val);
			_status = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string>(this, t => t.Status, (t, val) => t.Status = val);
			_type = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string>(this, t => t.Type, (t, val) => t.Type = val);
			_username = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string>(this, t => t.Username, (t, val) => t.Username = val);
			_tenantId = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_alerts = new IntermediateEntityCollection<projectNS.Account, projectNS.AccountAlert, intermediateNS.Account, intermediateNS.AccountAlert, L2SNS.Account, L2SNS.AccountAlert>(this, __accountalert => __accountalert._account);
			_employer = new IntermediateEntityReference<projectNS.Account, projectNS.Employer, intermediateNS.Account, intermediateNS.Employer, L2SNS.Account, L2SNS.Employer>(this, __a => __a.Employer, (__a, __employer) => __a.Employer = __employer, __employer => __employer._account, false);
			_company = new IntermediateEntityReference<projectNS.Account, projectNS.Company, intermediateNS.Account, intermediateNS.Company, L2SNS.Account, L2SNS.Company>(this, __a => __a.Company, (__a, __company) => __a.Company = __company, __company => __company._account, false);
			_tenant = new IntermediateEntityReference<projectNS.Account, projectNS.Tenant, intermediateNS.Account, intermediateNS.Tenant, L2SNS.Account, L2SNS.Tenant>(this, __a => __a.Tenant, (__a, __tenant) => __a.Tenant = __tenant, __tenant => __tenant._accounts, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Alerts":
					return Alerts.IsLoaded;
				case "Employer":
                	return _employer.IsLoaded;
				case "Company":
                	return _company.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class Account : ITableEntity<intermediateNS.Account>
	{
        public intermediateNS.Account _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Account;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class AccountAlertMapping : ModelEntityMapping<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert>
	{
		public AccountAlertMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Account>(e => e.Account, e => e.Alerts);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.AccountAlerts);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(AccountAlertMapping))]
	public partial class AccountAlert : IModelEntity<intermediateNS.AccountAlert>	
	{
		private intermediateNS.AccountAlert __intermediateEntity;
		public intermediateNS.AccountAlert _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.AccountAlert intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long? AccountId 
		{	
			get { return _intermediateEntity.AccountId; }
			set { _intermediateEntity.AccountId = value; }
		}
		public virtual string Status 
		{	
			get { return _intermediateEntity.Status; }
			set { _intermediateEntity.Status = value; }
		}
		public virtual string Message 
		{	
			get { return _intermediateEntity.Message; }
			set { _intermediateEntity.Message = value; }
		}
		public virtual string Type 
		{	
			get { return _intermediateEntity.Type; }
			set { _intermediateEntity.Type = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public Account Account 
		{	
			get { return _intermediateEntity.Account.GetEntity(); }
			set { if (value != null) _intermediateEntity.Account = value._intermediateEntity; else _intermediateEntity.Account = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public AccountAlert() : this(new intermediateNS.AccountAlert())
		{
		}
			
		public AccountAlert(intermediateNS.AccountAlert intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public AccountAlert(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.AccountAlert(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<AccountAlert, pocoNS.AccountAlert>(info);
		}

		public static bool operator ==(AccountAlert a, AccountAlert b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(AccountAlert a, AccountAlert b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((AccountAlert)this)._equals(obj as AccountAlert);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.AccountAlert ToPOCO()
		{
			return this.CreatePOCO<AccountAlert, pocoNS.AccountAlert>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class AccountAlert : IPOCO<projectNS.AccountAlert>	{


		public long Id { get; set; }
		public long? AccountId { get; set; }
		public string Status { get; set; }
		public string Message { get; set; }
		public string Type { get; set; }
		public long TenantId { get; set; }
		public POCOReference Account { get; set; }

		public POCOReference Tenant { get; set; }

			
		public AccountAlert()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class AccountAlert : IntermediateEntity<projectNS.AccountAlert, L2SNS.AccountAlert>
	{
		//Fields				
		public PrimaryKeyField<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert, long?> _accountId;
		public long? AccountId 
		{	
			get { return _accountId.Value; }
			set { _accountId.Value = value; }
		}
		public EntityField<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert, string> _status;
		public string Status 
		{	
			get { return _status.Value; }
			set { _status.Value = value; }
		}
		public EntityField<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert, string> _message;
		public string Message 
		{	
			get { return _message.Value; }
			set { _message.Value = value; }
		}
		public EntityField<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert, string> _type;
		public string Type 
		{	
			get { return _type.Value; }
			set { _type.Value = value; }
		}
		public EntityField<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.AccountAlert, projectNS.Account, intermediateNS.AccountAlert, intermediateNS.Account, L2SNS.AccountAlert, L2SNS.Account> _account;
		public intermediateNS.Account Account
		{	
			get { return _account.Value; }
			set { _account.Value = value; }
		}
		public IntermediateEntityReference<projectNS.AccountAlert, projectNS.Tenant, intermediateNS.AccountAlert, intermediateNS.Tenant, L2SNS.AccountAlert, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public AccountAlert()
		{
			__tableEntity = new L2SNS.AccountAlert();
			initFields();
		}
		
		public AccountAlert(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.AccountAlert();
			initFields();
			
			this.Deserialize<projectNS.AccountAlert, AccountAlert, pocoNS.AccountAlert>(info);
			
		}
			
		public AccountAlert(L2SNS.AccountAlert tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert, long>(this, t => t.Id, (t, val) => t.Id = val);
			_accountId = new EntityField<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert, long?>(this, t => t.AccountId, (t, val) => t.AccountId = val);
			_status = new EntityField<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert, string>(this, t => t.Status, (t, val) => t.Status = val);
			_message = new EntityField<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert, string>(this, t => t.Message, (t, val) => t.Message = val);
			_type = new EntityField<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert, string>(this, t => t.Type, (t, val) => t.Type = val);
			_tenantId = new EntityField<projectNS.AccountAlert, intermediateNS.AccountAlert, L2SNS.AccountAlert, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_account = new IntermediateEntityReference<projectNS.AccountAlert, projectNS.Account, intermediateNS.AccountAlert, intermediateNS.Account, L2SNS.AccountAlert, L2SNS.Account>(this, __a => __a.Account, (__a, __account) => __a.Account = __account, __account => __account._alerts, true);
			_tenant = new IntermediateEntityReference<projectNS.AccountAlert, projectNS.Tenant, intermediateNS.AccountAlert, intermediateNS.Tenant, L2SNS.AccountAlert, L2SNS.Tenant>(this, __a => __a.Tenant, (__a, __tenant) => __a.Tenant = __tenant, __tenant => __tenant._accountAlerts, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Account":
                	return _account.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class AccountAlert : ITableEntity<intermediateNS.AccountAlert>
	{
        public intermediateNS.AccountAlert _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.AccountAlert;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class AttachmentMapping : ModelEntityMapping<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment>
	{
		public AttachmentMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddManyToManyRelationship<projectNS.Project, ProjectAttachmentMap>(e => e.Projects, map => map.Project, map => map.Attachment);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Attachments);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(AttachmentMapping))]
	public partial class Attachment : EntityBase, IModelEntity<intermediateNS.Attachment>	
	{
		private intermediateNS.Attachment __intermediateEntity;
		public intermediateNS.Attachment _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Attachment intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual DateTime DateAdded 
		{	
			get { return _intermediateEntity.DateAdded; }
			set { _intermediateEntity.DateAdded = value; }
		}
		public virtual string OriginalFileName 
		{	
			get { return _intermediateEntity.OriginalFileName; }
			set { _intermediateEntity.OriginalFileName = value; }
		}
		public virtual Guid Token 
		{	
			get { return _intermediateEntity.Token; }
			set { _intermediateEntity.Token = value; }
		}
		public virtual string Url 
		{	
			get { return _intermediateEntity.Url; }
			set { _intermediateEntity.Url = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.Project> Projects 
		{	
			get { return _intermediateEntity.Projects.EntityCollection; }
		}		
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Attachment() : this(new intermediateNS.Attachment())
		{
		}
			
		public Attachment(intermediateNS.Attachment intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Attachment(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Attachment(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Attachment, pocoNS.Attachment>(info);
		}

		public static bool operator ==(Attachment a, Attachment b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Attachment a, Attachment b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Attachment)this)._equals(obj as Attachment);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Attachment ToPOCO()
		{
			return this.CreatePOCO<Attachment, pocoNS.Attachment>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class Attachment : IPOCO<projectNS.Attachment>	{


		public long Id { get; set; }
		public DateTime DateAdded { get; set; }
		public string OriginalFileName { get; set; }
		public Guid Token { get; set; }
		public string Url { get; set; }
		public long TenantId { get; set; }
		public POCOCollection Projects { get; set; }

		public POCOReference Tenant { get; set; }

			
		public Attachment()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class Attachment : IntermediateEntity<projectNS.Attachment, L2SNS.Attachment>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment, DateTime> _dateAdded;
		public DateTime DateAdded 
		{	
			get { return _dateAdded.Value; }
			set { _dateAdded.Value = value; }
		}
		public EntityField<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment, string> _originalFileName;
		public string OriginalFileName 
		{	
			get { return _originalFileName.Value; }
			set { _originalFileName.Value = value; }
		}
		public EntityField<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment, Guid> _token;
		public Guid Token 
		{	
			get { return _token.Value; }
			set { _token.Value = value; }
		}
		public EntityField<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment, string> _url;
		public string Url 
		{	
			get { return _url.Value; }
			set { _url.Value = value; }
		}
		public EntityField<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateManyToManyCollection<projectNS.Attachment, projectNS.Project, projectNS.ProjectAttachmentMap, intermediateNS.Attachment, intermediateNS.Project, intermediateNS.ProjectAttachmentMap, L2SNS.Attachment, L2SNS.Project, L2SNS.ProjectAttachmentMap> _projects;
		public IntermediateManyToManyCollection<projectNS.Attachment, projectNS.Project, projectNS.ProjectAttachmentMap, intermediateNS.Attachment, intermediateNS.Project, intermediateNS.ProjectAttachmentMap, L2SNS.Attachment, L2SNS.Project, L2SNS.ProjectAttachmentMap> Projects 
		{	
			get { return _projects; }		
		}
		public IntermediateEntityReference<projectNS.Attachment, projectNS.Tenant, intermediateNS.Attachment, intermediateNS.Tenant, L2SNS.Attachment, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Attachment()
		{
			__tableEntity = new L2SNS.Attachment();
			initFields();
		}
		
		public Attachment(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Attachment();
			initFields();
			
			this.Deserialize<projectNS.Attachment, Attachment, pocoNS.Attachment>(info);
			
		}
			
		public Attachment(L2SNS.Attachment tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment, long>(this, t => t.Id, (t, val) => t.Id = val);
			_dateAdded = new EntityField<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment, DateTime>(this, t => t.DateAdded, (t, val) => t.DateAdded = val);
			_originalFileName = new EntityField<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment, string>(this, t => t.OriginalFileName, (t, val) => t.OriginalFileName = val);
			_token = new EntityField<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment, Guid>(this, t => t.Token, (t, val) => t.Token = val);
			_url = new EntityField<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment, string>(this, t => t.Url, (t, val) => t.Url = val);
			_tenantId = new EntityField<projectNS.Attachment, intermediateNS.Attachment, L2SNS.Attachment, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_projects = new IntermediateManyToManyCollection<projectNS.Attachment, projectNS.Project, projectNS.ProjectAttachmentMap, intermediateNS.Attachment, intermediateNS.Project, intermediateNS.ProjectAttachmentMap, L2SNS.Attachment, L2SNS.Project, L2SNS.ProjectAttachmentMap>(this, __map => __map.Project, __map => __map.Attachment, (__map, __a) => __map.Project = __a, (__map, __project) => __map.Attachment = __project, __project => __project._attachments);
			_tenant = new IntermediateEntityReference<projectNS.Attachment, projectNS.Tenant, intermediateNS.Attachment, intermediateNS.Tenant, L2SNS.Attachment, L2SNS.Tenant>(this, __a => __a.Tenant, (__a, __tenant) => __a.Tenant = __tenant, __tenant => __tenant._attachments, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Projects":
					return Projects.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class Attachment : ITableEntity<intermediateNS.Attachment>
	{
        public intermediateNS.Attachment _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Attachment;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class BidMapping : ModelEntityMapping<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid>
	{
		public BidMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Company>(e => e.Company, e => e.Bids);
			AddRelationship<projectNS.Project>(e => e.Project, e => e.Bids);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Bids);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(BidMapping))]
	public partial class Bid : EntityBase, IModelEntity<intermediateNS.Bid>	
	{
		private intermediateNS.Bid __intermediateEntity;
		public intermediateNS.Bid _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Bid intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long CompanyId 
		{	
			get { return _intermediateEntity.CompanyId; }
			set { _intermediateEntity.CompanyId = value; }
		}
		public virtual DateTime DateCreated 
		{	
			get { return _intermediateEntity.DateCreated; }
			set { _intermediateEntity.DateCreated = value; }
		}
		public virtual int HoursOfEffort 
		{	
			get { return _intermediateEntity.HoursOfEffort; }
			set { _intermediateEntity.HoursOfEffort = value; }
		}
		public virtual bool Invited 
		{	
			get { return _intermediateEntity.Invited; }
			set { _intermediateEntity.Invited = value; }
		}
		public virtual int? MaxQuote 
		{	
			get { return _intermediateEntity.MaxQuote; }
			set { _intermediateEntity.MaxQuote = value; }
		}
		public virtual string Message 
		{	
			get { return _intermediateEntity.Message; }
			set { _intermediateEntity.Message = value; }
		}
		public virtual int? MinQuote 
		{	
			get { return _intermediateEntity.MinQuote; }
			set { _intermediateEntity.MinQuote = value; }
		}
		public virtual long ProjectId 
		{	
			get { return _intermediateEntity.ProjectId; }
			set { _intermediateEntity.ProjectId = value; }
		}
		public virtual string Status 
		{	
			get { return _intermediateEntity.Status; }
			set { _intermediateEntity.Status = value; }
		}
		public virtual string Timeframe 
		{	
			get { return _intermediateEntity.Timeframe; }
			set { _intermediateEntity.Timeframe = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public Company Company 
		{	
			get { return _intermediateEntity.Company.GetEntity(); }
			set { if (value != null) _intermediateEntity.Company = value._intermediateEntity; else _intermediateEntity.Company = null; }
		}
		public Project Project 
		{	
			get { return _intermediateEntity.Project.GetEntity(); }
			set { if (value != null) _intermediateEntity.Project = value._intermediateEntity; else _intermediateEntity.Project = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Bid() : this(new intermediateNS.Bid())
		{
		}
			
		public Bid(intermediateNS.Bid intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Bid(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Bid(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Bid, pocoNS.Bid>(info);
		}

		public static bool operator ==(Bid a, Bid b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Bid a, Bid b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Bid)this)._equals(obj as Bid);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Bid ToPOCO()
		{
			return this.CreatePOCO<Bid, pocoNS.Bid>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class Bid : IPOCO<projectNS.Bid>	{


		public long Id { get; set; }
		public long CompanyId { get; set; }
		public DateTime DateCreated { get; set; }
		public int HoursOfEffort { get; set; }
		public bool Invited { get; set; }
		public int? MaxQuote { get; set; }
		public string Message { get; set; }
		public int? MinQuote { get; set; }
		public long ProjectId { get; set; }
		public string Status { get; set; }
		public string Timeframe { get; set; }
		public long TenantId { get; set; }
		public POCOReference Company { get; set; }

		public POCOReference Project { get; set; }

		public POCOReference Tenant { get; set; }

			
		public Bid()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class Bid : IntermediateEntity<projectNS.Bid, L2SNS.Bid>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, long> _companyId;
		public long CompanyId 
		{	
			get { return _companyId.Value; }
			set { _companyId.Value = value; }
		}
		public EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, DateTime> _dateCreated;
		public DateTime DateCreated 
		{	
			get { return _dateCreated.Value; }
			set { _dateCreated.Value = value; }
		}
		public EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, int> _hoursOfEffort;
		public int HoursOfEffort 
		{	
			get { return _hoursOfEffort.Value; }
			set { _hoursOfEffort.Value = value; }
		}
		public EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, bool> _invited;
		public bool Invited 
		{	
			get { return _invited.Value; }
			set { _invited.Value = value; }
		}
		public EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, int?> _maxQuote;
		public int? MaxQuote 
		{	
			get { return _maxQuote.Value; }
			set { _maxQuote.Value = value; }
		}
		public EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, string> _message;
		public string Message 
		{	
			get { return _message.Value; }
			set { _message.Value = value; }
		}
		public EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, int?> _minQuote;
		public int? MinQuote 
		{	
			get { return _minQuote.Value; }
			set { _minQuote.Value = value; }
		}
		public EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, long> _projectId;
		public long ProjectId 
		{	
			get { return _projectId.Value; }
			set { _projectId.Value = value; }
		}
		public EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, string> _status;
		public string Status 
		{	
			get { return _status.Value; }
			set { _status.Value = value; }
		}
		public EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, string> _timeframe;
		public string Timeframe 
		{	
			get { return _timeframe.Value; }
			set { _timeframe.Value = value; }
		}
		public EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.Bid, projectNS.Company, intermediateNS.Bid, intermediateNS.Company, L2SNS.Bid, L2SNS.Company> _company;
		public intermediateNS.Company Company
		{	
			get { return _company.Value; }
			set { _company.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Bid, projectNS.Project, intermediateNS.Bid, intermediateNS.Project, L2SNS.Bid, L2SNS.Project> _project;
		public intermediateNS.Project Project
		{	
			get { return _project.Value; }
			set { _project.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Bid, projectNS.Tenant, intermediateNS.Bid, intermediateNS.Tenant, L2SNS.Bid, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Bid()
		{
			__tableEntity = new L2SNS.Bid();
			initFields();
		}
		
		public Bid(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Bid();
			initFields();
			
			this.Deserialize<projectNS.Bid, Bid, pocoNS.Bid>(info);
			
		}
			
		public Bid(L2SNS.Bid tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, long>(this, t => t.Id, (t, val) => t.Id = val);
			_companyId = new EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, long>(this, t => t.CompanyId, (t, val) => t.CompanyId = val);
			_dateCreated = new EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, DateTime>(this, t => t.DateCreated, (t, val) => t.DateCreated = val);
			_hoursOfEffort = new EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, int>(this, t => t.HoursOfEffort, (t, val) => t.HoursOfEffort = val);
			_invited = new EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, bool>(this, t => t.Invited, (t, val) => t.Invited = val);
			_maxQuote = new EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, int?>(this, t => t.MaxQuote, (t, val) => t.MaxQuote = val);
			_message = new EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, string>(this, t => t.Message, (t, val) => t.Message = val);
			_minQuote = new EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, int?>(this, t => t.MinQuote, (t, val) => t.MinQuote = val);
			_projectId = new EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, long>(this, t => t.ProjectId, (t, val) => t.ProjectId = val);
			_status = new EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, string>(this, t => t.Status, (t, val) => t.Status = val);
			_timeframe = new EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, string>(this, t => t.Timeframe, (t, val) => t.Timeframe = val);
			_tenantId = new EntityField<projectNS.Bid, intermediateNS.Bid, L2SNS.Bid, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_company = new IntermediateEntityReference<projectNS.Bid, projectNS.Company, intermediateNS.Bid, intermediateNS.Company, L2SNS.Bid, L2SNS.Company>(this, __b => __b.Company, (__b, __company) => __b.Company = __company, __company => __company._bids, false);
			_project = new IntermediateEntityReference<projectNS.Bid, projectNS.Project, intermediateNS.Bid, intermediateNS.Project, L2SNS.Bid, L2SNS.Project>(this, __b => __b.Project, (__b, __project) => __b.Project = __project, __project => __project._bids, false);
			_tenant = new IntermediateEntityReference<projectNS.Bid, projectNS.Tenant, intermediateNS.Bid, intermediateNS.Tenant, L2SNS.Bid, L2SNS.Tenant>(this, __b => __b.Tenant, (__b, __tenant) => __b.Tenant = __tenant, __tenant => __tenant._bids, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Company":
                	return _company.IsLoaded;
				case "Project":
                	return _project.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class Bid : ITableEntity<intermediateNS.Bid>
	{
        public intermediateNS.Bid _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Bid;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class CompanyMapping : ModelEntityMapping<projectNS.Company, intermediateNS.Company, L2SNS.Company>
	{
		public CompanyMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddManyToManyRelationship<projectNS.Tag, TagCompanyMap>(e => e.Tags, map => map.Tag, map => map.Company);
			AddRelationship<projectNS.ProjectInvite>(e => e.ProjectInvites, e => e.Company);
			AddRelationship<projectNS.Consultant>(e => e.Consultants, e => e.Company);
			AddRelationship<projectNS.ProfileFeedback>(e => e.FeedbackGiven, e => e.Company);
			AddRelationship<projectNS.EmployerFeedback>(e => e.FeedbackReceived, e => e.Company);
			AddRelationship<projectNS.Bid>(e => e.Bids, e => e.Company);
			AddRelationship<projectNS.PortfolioEntry>(e => e.Portfolio, e => e.Company);
			AddRelationship<projectNS.Account>(e => e.Account, e => e.Company);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Companies);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(CompanyMapping))]
	public partial class Company : EntityBase, IModelEntity<intermediateNS.Company>	
	{
		private intermediateNS.Company __intermediateEntity;
		public intermediateNS.Company _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Company intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long AccountId 
		{	
			get { return _intermediateEntity.AccountId; }
			set { _intermediateEntity.AccountId = value; }
		}
		public virtual string City 
		{	
			get { return _intermediateEntity.City; }
			set { _intermediateEntity.City = value; }
		}
		public virtual string Country 
		{	
			get { return _intermediateEntity.Country; }
			set { _intermediateEntity.Country = value; }
		}
		public virtual string Currency 
		{	
			get { return _intermediateEntity.Currency; }
			set { _intermediateEntity.Currency = value; }
		}
		public virtual string Description 
		{	
			get { return _intermediateEntity.Description; }
			set { _intermediateEntity.Description = value; }
		}
		public virtual bool IsVerified 
		{	
			get { return _intermediateEntity.IsVerified; }
			set { _intermediateEntity.IsVerified = value; }
		}
		public virtual string Logo 
		{	
			get { return _intermediateEntity.Logo; }
			set { _intermediateEntity.Logo = value; }
		}
		public virtual int? MinimumRate 
		{	
			get { return _intermediateEntity.MinimumRate; }
			set { _intermediateEntity.MinimumRate = value; }
		}
		public virtual string Name 
		{	
			get { return _intermediateEntity.Name; }
			set { _intermediateEntity.Name = value; }
		}
		public virtual string Style 
		{	
			get { return _intermediateEntity.Style; }
			set { _intermediateEntity.Style = value; }
		}
		public virtual string Type 
		{	
			get { return _intermediateEntity.Type; }
			set { _intermediateEntity.Type = value; }
		}
		public virtual string Website 
		{	
			get { return _intermediateEntity.Website; }
			set { _intermediateEntity.Website = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.Tag> Tags 
		{	
			get { return _intermediateEntity.Tags.EntityCollection; }
		}		
		public ICollection<projectNS.ProjectInvite> ProjectInvites 
		{	
			get { return _intermediateEntity.ProjectInvites.EntityCollection; }
		}		
		public ICollection<projectNS.Consultant> Consultants 
		{	
			get { return _intermediateEntity.Consultants.EntityCollection; }
		}		
		public ICollection<projectNS.ProfileFeedback> FeedbackGiven 
		{	
			get { return _intermediateEntity.FeedbackGiven.EntityCollection; }
		}		
		public ICollection<projectNS.EmployerFeedback> FeedbackReceived 
		{	
			get { return _intermediateEntity.FeedbackReceived.EntityCollection; }
		}		
		public ICollection<projectNS.Bid> Bids 
		{	
			get { return _intermediateEntity.Bids.EntityCollection; }
		}		
		public ICollection<projectNS.PortfolioEntry> Portfolio 
		{	
			get { return _intermediateEntity.Portfolio.EntityCollection; }
		}		
		public Account Account 
		{	
			get { return _intermediateEntity.Account.GetEntity(); }
			set { if (value != null) _intermediateEntity.Account = value._intermediateEntity; else _intermediateEntity.Account = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Company() : this(new intermediateNS.Company())
		{
		}
			
		public Company(intermediateNS.Company intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Company(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Company(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Company, pocoNS.Company>(info);
		}

		public static bool operator ==(Company a, Company b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Company a, Company b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Company)this)._equals(obj as Company);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Company ToPOCO()
		{
			return this.CreatePOCO<Company, pocoNS.Company>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class Company : IPOCO<projectNS.Company>	{


		public long Id { get; set; }
		public long AccountId { get; set; }
		public string City { get; set; }
		public string Country { get; set; }
		public string Currency { get; set; }
		public string Description { get; set; }
		public bool IsVerified { get; set; }
		public string Logo { get; set; }
		public int? MinimumRate { get; set; }
		public string Name { get; set; }
		public string Style { get; set; }
		public string Type { get; set; }
		public string Website { get; set; }
		public long TenantId { get; set; }
		public POCOCollection Tags { get; set; }

		public POCOCollection ProjectInvites { get; set; }

		public POCOCollection Consultants { get; set; }

		public POCOCollection FeedbackGiven { get; set; }

		public POCOCollection FeedbackReceived { get; set; }

		public POCOCollection Bids { get; set; }

		public POCOCollection Portfolio { get; set; }

		public POCOReference Account { get; set; }

		public POCOReference Tenant { get; set; }

			
		public Company()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class Company : IntermediateEntity<projectNS.Company, L2SNS.Company>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Company, intermediateNS.Company, L2SNS.Company, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, long> _accountId;
		public long AccountId 
		{	
			get { return _accountId.Value; }
			set { _accountId.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string> _city;
		public string City 
		{	
			get { return _city.Value; }
			set { _city.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string> _country;
		public string Country 
		{	
			get { return _country.Value; }
			set { _country.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string> _currency;
		public string Currency 
		{	
			get { return _currency.Value; }
			set { _currency.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string> _description;
		public string Description 
		{	
			get { return _description.Value; }
			set { _description.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, bool> _isVerified;
		public bool IsVerified 
		{	
			get { return _isVerified.Value; }
			set { _isVerified.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string> _logo;
		public string Logo 
		{	
			get { return _logo.Value; }
			set { _logo.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, int?> _minimumRate;
		public int? MinimumRate 
		{	
			get { return _minimumRate.Value; }
			set { _minimumRate.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string> _name;
		public string Name 
		{	
			get { return _name.Value; }
			set { _name.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string> _style;
		public string Style 
		{	
			get { return _style.Value; }
			set { _style.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string> _type;
		public string Type 
		{	
			get { return _type.Value; }
			set { _type.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string> _website;
		public string Website 
		{	
			get { return _website.Value; }
			set { _website.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateManyToManyCollection<projectNS.Company, projectNS.Tag, projectNS.TagCompanyMap, intermediateNS.Company, intermediateNS.Tag, intermediateNS.TagCompanyMap, L2SNS.Company, L2SNS.Tag, L2SNS.TagCompanyMap> _tags;
		public IntermediateManyToManyCollection<projectNS.Company, projectNS.Tag, projectNS.TagCompanyMap, intermediateNS.Company, intermediateNS.Tag, intermediateNS.TagCompanyMap, L2SNS.Company, L2SNS.Tag, L2SNS.TagCompanyMap> Tags 
		{	
			get { return _tags; }		
		}
		public IntermediateEntityCollection<projectNS.Company, projectNS.ProjectInvite, intermediateNS.Company, intermediateNS.ProjectInvite, L2SNS.Company, L2SNS.ProjectInvite> _projectInvites;
		public IntermediateEntityCollection<projectNS.Company, projectNS.ProjectInvite, intermediateNS.Company, intermediateNS.ProjectInvite, L2SNS.Company, L2SNS.ProjectInvite> ProjectInvites 
		{	
			get { return _projectInvites; }		
		}				
		public IntermediateEntityCollection<projectNS.Company, projectNS.Consultant, intermediateNS.Company, intermediateNS.Consultant, L2SNS.Company, L2SNS.Consultant> _consultants;
		public IntermediateEntityCollection<projectNS.Company, projectNS.Consultant, intermediateNS.Company, intermediateNS.Consultant, L2SNS.Company, L2SNS.Consultant> Consultants 
		{	
			get { return _consultants; }		
		}				
		public IntermediateEntityCollection<projectNS.Company, projectNS.ProfileFeedback, intermediateNS.Company, intermediateNS.ProfileFeedback, L2SNS.Company, L2SNS.ProfileFeedback> _feedbackGiven;
		public IntermediateEntityCollection<projectNS.Company, projectNS.ProfileFeedback, intermediateNS.Company, intermediateNS.ProfileFeedback, L2SNS.Company, L2SNS.ProfileFeedback> FeedbackGiven 
		{	
			get { return _feedbackGiven; }		
		}				
		public IntermediateEntityCollection<projectNS.Company, projectNS.EmployerFeedback, intermediateNS.Company, intermediateNS.EmployerFeedback, L2SNS.Company, L2SNS.EmployerFeedback> _feedbackReceived;
		public IntermediateEntityCollection<projectNS.Company, projectNS.EmployerFeedback, intermediateNS.Company, intermediateNS.EmployerFeedback, L2SNS.Company, L2SNS.EmployerFeedback> FeedbackReceived 
		{	
			get { return _feedbackReceived; }		
		}				
		public IntermediateEntityCollection<projectNS.Company, projectNS.Bid, intermediateNS.Company, intermediateNS.Bid, L2SNS.Company, L2SNS.Bid> _bids;
		public IntermediateEntityCollection<projectNS.Company, projectNS.Bid, intermediateNS.Company, intermediateNS.Bid, L2SNS.Company, L2SNS.Bid> Bids 
		{	
			get { return _bids; }		
		}				
		public IntermediateEntityCollection<projectNS.Company, projectNS.PortfolioEntry, intermediateNS.Company, intermediateNS.PortfolioEntry, L2SNS.Company, L2SNS.PortfolioEntry> _portfolio;
		public IntermediateEntityCollection<projectNS.Company, projectNS.PortfolioEntry, intermediateNS.Company, intermediateNS.PortfolioEntry, L2SNS.Company, L2SNS.PortfolioEntry> Portfolio 
		{	
			get { return _portfolio; }		
		}				
		public IntermediateEntityReference<projectNS.Company, projectNS.Account, intermediateNS.Company, intermediateNS.Account, L2SNS.Company, L2SNS.Account> _account;
		public intermediateNS.Account Account
		{	
			get { return _account.Value; }
			set { _account.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Company, projectNS.Tenant, intermediateNS.Company, intermediateNS.Tenant, L2SNS.Company, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Company()
		{
			__tableEntity = new L2SNS.Company();
			initFields();
		}
		
		public Company(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Company();
			initFields();
			
			this.Deserialize<projectNS.Company, Company, pocoNS.Company>(info);
			
		}
			
		public Company(L2SNS.Company tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Company, intermediateNS.Company, L2SNS.Company, long>(this, t => t.Id, (t, val) => t.Id = val);
			_accountId = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, long>(this, t => t.AccountId, (t, val) => t.AccountId = val);
			_city = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string>(this, t => t.City, (t, val) => t.City = val);
			_country = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string>(this, t => t.Country, (t, val) => t.Country = val);
			_currency = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string>(this, t => t.Currency, (t, val) => t.Currency = val);
			_description = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string>(this, t => t.Description, (t, val) => t.Description = val);
			_isVerified = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, bool>(this, t => t.IsVerified, (t, val) => t.IsVerified = val);
			_logo = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string>(this, t => t.Logo, (t, val) => t.Logo = val);
			_minimumRate = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, int?>(this, t => t.MinimumRate, (t, val) => t.MinimumRate = val);
			_name = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string>(this, t => t.Name, (t, val) => t.Name = val);
			_style = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string>(this, t => t.Style, (t, val) => t.Style = val);
			_type = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string>(this, t => t.Type, (t, val) => t.Type = val);
			_website = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string>(this, t => t.Website, (t, val) => t.Website = val);
			_tenantId = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_tags = new IntermediateManyToManyCollection<projectNS.Company, projectNS.Tag, projectNS.TagCompanyMap, intermediateNS.Company, intermediateNS.Tag, intermediateNS.TagCompanyMap, L2SNS.Company, L2SNS.Tag, L2SNS.TagCompanyMap>(this, __map => __map.Tag, __map => __map.Company, (__map, __c) => __map.Tag = __c, (__map, __tag) => __map.Company = __tag, __tag => __tag._companies);
			_projectInvites = new IntermediateEntityCollection<projectNS.Company, projectNS.ProjectInvite, intermediateNS.Company, intermediateNS.ProjectInvite, L2SNS.Company, L2SNS.ProjectInvite>(this, __projectinvite => __projectinvite._company);
			_consultants = new IntermediateEntityCollection<projectNS.Company, projectNS.Consultant, intermediateNS.Company, intermediateNS.Consultant, L2SNS.Company, L2SNS.Consultant>(this, __consultant => __consultant._company);
			_feedbackGiven = new IntermediateEntityCollection<projectNS.Company, projectNS.ProfileFeedback, intermediateNS.Company, intermediateNS.ProfileFeedback, L2SNS.Company, L2SNS.ProfileFeedback>(this, __profilefeedback => __profilefeedback._company);
			_feedbackReceived = new IntermediateEntityCollection<projectNS.Company, projectNS.EmployerFeedback, intermediateNS.Company, intermediateNS.EmployerFeedback, L2SNS.Company, L2SNS.EmployerFeedback>(this, __employerfeedback => __employerfeedback._company);
			_bids = new IntermediateEntityCollection<projectNS.Company, projectNS.Bid, intermediateNS.Company, intermediateNS.Bid, L2SNS.Company, L2SNS.Bid>(this, __bid => __bid._company);
			_portfolio = new IntermediateEntityCollection<projectNS.Company, projectNS.PortfolioEntry, intermediateNS.Company, intermediateNS.PortfolioEntry, L2SNS.Company, L2SNS.PortfolioEntry>(this, __portfolioentry => __portfolioentry._company);
			_account = new IntermediateEntityReference<projectNS.Company, projectNS.Account, intermediateNS.Company, intermediateNS.Account, L2SNS.Company, L2SNS.Account>(this, __c => __c.Account, (__c, __account) => __c.Account = __account, __account => __account._company, false);
			_tenant = new IntermediateEntityReference<projectNS.Company, projectNS.Tenant, intermediateNS.Company, intermediateNS.Tenant, L2SNS.Company, L2SNS.Tenant>(this, __c => __c.Tenant, (__c, __tenant) => __c.Tenant = __tenant, __tenant => __tenant._companies, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Tags":
					return Tags.IsLoaded;
				case "ProjectInvites":
					return ProjectInvites.IsLoaded;
				case "Consultants":
					return Consultants.IsLoaded;
				case "FeedbackGiven":
					return FeedbackGiven.IsLoaded;
				case "FeedbackReceived":
					return FeedbackReceived.IsLoaded;
				case "Bids":
					return Bids.IsLoaded;
				case "Portfolio":
					return Portfolio.IsLoaded;
				case "Account":
                	return _account.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class Company : ITableEntity<intermediateNS.Company>
	{
        public intermediateNS.Company _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Company;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class ConsultantMapping : ModelEntityMapping<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant>
	{
		public ConsultantMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Company>(e => e.Company, e => e.Consultants);
			AddRelationship<projectNS.Credential>(e => e.Credentials, e => e.Consultant);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Consultants);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(ConsultantMapping))]
	public partial class Consultant : EntityBase, IModelEntity<intermediateNS.Consultant>	
	{
		private intermediateNS.Consultant __intermediateEntity;
		public intermediateNS.Consultant _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Consultant intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long CompanyId 
		{	
			get { return _intermediateEntity.CompanyId; }
			set { _intermediateEntity.CompanyId = value; }
		}
		public virtual string Designation 
		{	
			get { return _intermediateEntity.Designation; }
			set { _intermediateEntity.Designation = value; }
		}
		public virtual string LinkedinProfile 
		{	
			get { return _intermediateEntity.LinkedinProfile; }
			set { _intermediateEntity.LinkedinProfile = value; }
		}
		public virtual string Name 
		{	
			get { return _intermediateEntity.Name; }
			set { _intermediateEntity.Name = value; }
		}
		public virtual string Picture 
		{	
			get { return _intermediateEntity.Picture; }
			set { _intermediateEntity.Picture = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public Company Company 
		{	
			get { return _intermediateEntity.Company.GetEntity(); }
			set { if (value != null) _intermediateEntity.Company = value._intermediateEntity; else _intermediateEntity.Company = null; }
		}
		public ICollection<projectNS.Credential> Credentials 
		{	
			get { return _intermediateEntity.Credentials.EntityCollection; }
		}		
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Consultant() : this(new intermediateNS.Consultant())
		{
		}
			
		public Consultant(intermediateNS.Consultant intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Consultant(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Consultant(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Consultant, pocoNS.Consultant>(info);
		}

		public static bool operator ==(Consultant a, Consultant b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Consultant a, Consultant b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Consultant)this)._equals(obj as Consultant);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Consultant ToPOCO()
		{
			return this.CreatePOCO<Consultant, pocoNS.Consultant>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class Consultant : IPOCO<projectNS.Consultant>	{


		public long Id { get; set; }
		public long CompanyId { get; set; }
		public string Designation { get; set; }
		public string LinkedinProfile { get; set; }
		public string Name { get; set; }
		public string Picture { get; set; }
		public long TenantId { get; set; }
		public POCOReference Company { get; set; }

		public POCOCollection Credentials { get; set; }

		public POCOReference Tenant { get; set; }

			
		public Consultant()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class Consultant : IntermediateEntity<projectNS.Consultant, L2SNS.Consultant>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, long> _companyId;
		public long CompanyId 
		{	
			get { return _companyId.Value; }
			set { _companyId.Value = value; }
		}
		public EntityField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, string> _designation;
		public string Designation 
		{	
			get { return _designation.Value; }
			set { _designation.Value = value; }
		}
		public EntityField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, string> _linkedinProfile;
		public string LinkedinProfile 
		{	
			get { return _linkedinProfile.Value; }
			set { _linkedinProfile.Value = value; }
		}
		public EntityField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, string> _name;
		public string Name 
		{	
			get { return _name.Value; }
			set { _name.Value = value; }
		}
		public EntityField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, string> _picture;
		public string Picture 
		{	
			get { return _picture.Value; }
			set { _picture.Value = value; }
		}
		public EntityField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.Consultant, projectNS.Company, intermediateNS.Consultant, intermediateNS.Company, L2SNS.Consultant, L2SNS.Company> _company;
		public intermediateNS.Company Company
		{	
			get { return _company.Value; }
			set { _company.Value = value; }
		}
		public IntermediateEntityCollection<projectNS.Consultant, projectNS.Credential, intermediateNS.Consultant, intermediateNS.Credential, L2SNS.Consultant, L2SNS.Credential> _credentials;
		public IntermediateEntityCollection<projectNS.Consultant, projectNS.Credential, intermediateNS.Consultant, intermediateNS.Credential, L2SNS.Consultant, L2SNS.Credential> Credentials 
		{	
			get { return _credentials; }		
		}				
		public IntermediateEntityReference<projectNS.Consultant, projectNS.Tenant, intermediateNS.Consultant, intermediateNS.Tenant, L2SNS.Consultant, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Consultant()
		{
			__tableEntity = new L2SNS.Consultant();
			initFields();
		}
		
		public Consultant(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Consultant();
			initFields();
			
			this.Deserialize<projectNS.Consultant, Consultant, pocoNS.Consultant>(info);
			
		}
			
		public Consultant(L2SNS.Consultant tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, long>(this, t => t.Id, (t, val) => t.Id = val);
			_companyId = new EntityField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, long>(this, t => t.CompanyId, (t, val) => t.CompanyId = val);
			_designation = new EntityField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, string>(this, t => t.Designation, (t, val) => t.Designation = val);
			_linkedinProfile = new EntityField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, string>(this, t => t.LinkedinProfile, (t, val) => t.LinkedinProfile = val);
			_name = new EntityField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, string>(this, t => t.Name, (t, val) => t.Name = val);
			_picture = new EntityField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, string>(this, t => t.Picture, (t, val) => t.Picture = val);
			_tenantId = new EntityField<projectNS.Consultant, intermediateNS.Consultant, L2SNS.Consultant, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_company = new IntermediateEntityReference<projectNS.Consultant, projectNS.Company, intermediateNS.Consultant, intermediateNS.Company, L2SNS.Consultant, L2SNS.Company>(this, __c => __c.Company, (__c, __company) => __c.Company = __company, __company => __company._consultants, false);
			_credentials = new IntermediateEntityCollection<projectNS.Consultant, projectNS.Credential, intermediateNS.Consultant, intermediateNS.Credential, L2SNS.Consultant, L2SNS.Credential>(this, __credential => __credential._consultant);
			_tenant = new IntermediateEntityReference<projectNS.Consultant, projectNS.Tenant, intermediateNS.Consultant, intermediateNS.Tenant, L2SNS.Consultant, L2SNS.Tenant>(this, __c => __c.Tenant, (__c, __tenant) => __c.Tenant = __tenant, __tenant => __tenant._consultants, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Company":
                	return _company.IsLoaded;
				case "Credentials":
					return Credentials.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class Consultant : ITableEntity<intermediateNS.Consultant>
	{
        public intermediateNS.Consultant _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Consultant;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class CredentialMapping : ModelEntityMapping<projectNS.Credential, intermediateNS.Credential, L2SNS.Credential>
	{
		public CredentialMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Consultant>(e => e.Consultant, e => e.Credentials);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Credentials);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(CredentialMapping))]
	public partial class Credential : EntityBase, IModelEntity<intermediateNS.Credential>	
	{
		private intermediateNS.Credential __intermediateEntity;
		public intermediateNS.Credential _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Credential intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long ConsultantId 
		{	
			get { return _intermediateEntity.ConsultantId; }
			set { _intermediateEntity.ConsultantId = value; }
		}
		public virtual string Link 
		{	
			get { return _intermediateEntity.Link; }
			set { _intermediateEntity.Link = value; }
		}
		public virtual string Type 
		{	
			get { return _intermediateEntity.Type; }
			set { _intermediateEntity.Type = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public Consultant Consultant 
		{	
			get { return _intermediateEntity.Consultant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Consultant = value._intermediateEntity; else _intermediateEntity.Consultant = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Credential() : this(new intermediateNS.Credential())
		{
		}
			
		public Credential(intermediateNS.Credential intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Credential(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Credential(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Credential, pocoNS.Credential>(info);
		}

		public static bool operator ==(Credential a, Credential b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Credential a, Credential b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Credential)this)._equals(obj as Credential);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Credential ToPOCO()
		{
			return this.CreatePOCO<Credential, pocoNS.Credential>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class Credential : IPOCO<projectNS.Credential>	{


		public long Id { get; set; }
		public long ConsultantId { get; set; }
		public string Link { get; set; }
		public string Type { get; set; }
		public long TenantId { get; set; }
		public POCOReference Consultant { get; set; }

		public POCOReference Tenant { get; set; }

			
		public Credential()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class Credential : IntermediateEntity<projectNS.Credential, L2SNS.Credential>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Credential, intermediateNS.Credential, L2SNS.Credential, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Credential, intermediateNS.Credential, L2SNS.Credential, long> _consultantId;
		public long ConsultantId 
		{	
			get { return _consultantId.Value; }
			set { _consultantId.Value = value; }
		}
		public EntityField<projectNS.Credential, intermediateNS.Credential, L2SNS.Credential, string> _link;
		public string Link 
		{	
			get { return _link.Value; }
			set { _link.Value = value; }
		}
		public EntityField<projectNS.Credential, intermediateNS.Credential, L2SNS.Credential, string> _type;
		public string Type 
		{	
			get { return _type.Value; }
			set { _type.Value = value; }
		}
		public EntityField<projectNS.Credential, intermediateNS.Credential, L2SNS.Credential, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.Credential, projectNS.Consultant, intermediateNS.Credential, intermediateNS.Consultant, L2SNS.Credential, L2SNS.Consultant> _consultant;
		public intermediateNS.Consultant Consultant
		{	
			get { return _consultant.Value; }
			set { _consultant.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Credential, projectNS.Tenant, intermediateNS.Credential, intermediateNS.Tenant, L2SNS.Credential, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Credential()
		{
			__tableEntity = new L2SNS.Credential();
			initFields();
		}
		
		public Credential(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Credential();
			initFields();
			
			this.Deserialize<projectNS.Credential, Credential, pocoNS.Credential>(info);
			
		}
			
		public Credential(L2SNS.Credential tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Credential, intermediateNS.Credential, L2SNS.Credential, long>(this, t => t.Id, (t, val) => t.Id = val);
			_consultantId = new EntityField<projectNS.Credential, intermediateNS.Credential, L2SNS.Credential, long>(this, t => t.ConsultantId, (t, val) => t.ConsultantId = val);
			_link = new EntityField<projectNS.Credential, intermediateNS.Credential, L2SNS.Credential, string>(this, t => t.Link, (t, val) => t.Link = val);
			_type = new EntityField<projectNS.Credential, intermediateNS.Credential, L2SNS.Credential, string>(this, t => t.Type, (t, val) => t.Type = val);
			_tenantId = new EntityField<projectNS.Credential, intermediateNS.Credential, L2SNS.Credential, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_consultant = new IntermediateEntityReference<projectNS.Credential, projectNS.Consultant, intermediateNS.Credential, intermediateNS.Consultant, L2SNS.Credential, L2SNS.Consultant>(this, __c => __c.Consultant, (__c, __consultant) => __c.Consultant = __consultant, __consultant => __consultant._credentials, false);
			_tenant = new IntermediateEntityReference<projectNS.Credential, projectNS.Tenant, intermediateNS.Credential, intermediateNS.Tenant, L2SNS.Credential, L2SNS.Tenant>(this, __c => __c.Tenant, (__c, __tenant) => __c.Tenant = __tenant, __tenant => __tenant._credentials, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Consultant":
                	return _consultant.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class Credential : ITableEntity<intermediateNS.Credential>
	{
        public intermediateNS.Credential _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Credential;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class EmployerMapping : ModelEntityMapping<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer>
	{
		public EmployerMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Project>(e => e.Projects, e => e.Employer);
			AddRelationship<projectNS.EmployerFeedback>(e => e.FeedbackGiven, e => e.Employer);
			AddRelationship<projectNS.ProfileFeedback>(e => e.FeedbackReceived, e => e.Employer);
			AddRelationship<projectNS.Account>(e => e.Account, e => e.Employer);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Employers);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(EmployerMapping))]
	public partial class Employer : EntityBase, IModelEntity<intermediateNS.Employer>	
	{
		private intermediateNS.Employer __intermediateEntity;
		public intermediateNS.Employer _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Employer intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long AccountId 
		{	
			get { return _intermediateEntity.AccountId; }
			set { _intermediateEntity.AccountId = value; }
		}
		public virtual string City 
		{	
			get { return _intermediateEntity.City; }
			set { _intermediateEntity.City = value; }
		}
		public virtual string Country 
		{	
			get { return _intermediateEntity.Country; }
			set { _intermediateEntity.Country = value; }
		}
		public virtual bool IsVerified 
		{	
			get { return _intermediateEntity.IsVerified; }
			set { _intermediateEntity.IsVerified = value; }
		}
		public virtual string Name 
		{	
			get { return _intermediateEntity.Name; }
			set { _intermediateEntity.Name = value; }
		}
		public virtual string Picture 
		{	
			get { return _intermediateEntity.Picture; }
			set { _intermediateEntity.Picture = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.Project> Projects 
		{	
			get { return _intermediateEntity.Projects.EntityCollection; }
		}		
		public ICollection<projectNS.EmployerFeedback> FeedbackGiven 
		{	
			get { return _intermediateEntity.FeedbackGiven.EntityCollection; }
		}		
		public ICollection<projectNS.ProfileFeedback> FeedbackReceived 
		{	
			get { return _intermediateEntity.FeedbackReceived.EntityCollection; }
		}		
		public Account Account 
		{	
			get { return _intermediateEntity.Account.GetEntity(); }
			set { if (value != null) _intermediateEntity.Account = value._intermediateEntity; else _intermediateEntity.Account = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Employer() : this(new intermediateNS.Employer())
		{
		}
			
		public Employer(intermediateNS.Employer intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Employer(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Employer(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Employer, pocoNS.Employer>(info);
		}

		public static bool operator ==(Employer a, Employer b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Employer a, Employer b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Employer)this)._equals(obj as Employer);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Employer ToPOCO()
		{
			return this.CreatePOCO<Employer, pocoNS.Employer>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class Employer : IPOCO<projectNS.Employer>	{


		public long Id { get; set; }
		public long AccountId { get; set; }
		public string City { get; set; }
		public string Country { get; set; }
		public bool IsVerified { get; set; }
		public string Name { get; set; }
		public string Picture { get; set; }
		public long TenantId { get; set; }
		public POCOCollection Projects { get; set; }

		public POCOCollection FeedbackGiven { get; set; }

		public POCOCollection FeedbackReceived { get; set; }

		public POCOReference Account { get; set; }

		public POCOReference Tenant { get; set; }

			
		public Employer()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class Employer : IntermediateEntity<projectNS.Employer, L2SNS.Employer>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, long> _accountId;
		public long AccountId 
		{	
			get { return _accountId.Value; }
			set { _accountId.Value = value; }
		}
		public EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, string> _city;
		public string City 
		{	
			get { return _city.Value; }
			set { _city.Value = value; }
		}
		public EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, string> _country;
		public string Country 
		{	
			get { return _country.Value; }
			set { _country.Value = value; }
		}
		public EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, bool> _isVerified;
		public bool IsVerified 
		{	
			get { return _isVerified.Value; }
			set { _isVerified.Value = value; }
		}
		public EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, string> _name;
		public string Name 
		{	
			get { return _name.Value; }
			set { _name.Value = value; }
		}
		public EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, string> _picture;
		public string Picture 
		{	
			get { return _picture.Value; }
			set { _picture.Value = value; }
		}
		public EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityCollection<projectNS.Employer, projectNS.Project, intermediateNS.Employer, intermediateNS.Project, L2SNS.Employer, L2SNS.Project> _projects;
		public IntermediateEntityCollection<projectNS.Employer, projectNS.Project, intermediateNS.Employer, intermediateNS.Project, L2SNS.Employer, L2SNS.Project> Projects 
		{	
			get { return _projects; }		
		}				
		public IntermediateEntityCollection<projectNS.Employer, projectNS.EmployerFeedback, intermediateNS.Employer, intermediateNS.EmployerFeedback, L2SNS.Employer, L2SNS.EmployerFeedback> _feedbackGiven;
		public IntermediateEntityCollection<projectNS.Employer, projectNS.EmployerFeedback, intermediateNS.Employer, intermediateNS.EmployerFeedback, L2SNS.Employer, L2SNS.EmployerFeedback> FeedbackGiven 
		{	
			get { return _feedbackGiven; }		
		}				
		public IntermediateEntityCollection<projectNS.Employer, projectNS.ProfileFeedback, intermediateNS.Employer, intermediateNS.ProfileFeedback, L2SNS.Employer, L2SNS.ProfileFeedback> _feedbackReceived;
		public IntermediateEntityCollection<projectNS.Employer, projectNS.ProfileFeedback, intermediateNS.Employer, intermediateNS.ProfileFeedback, L2SNS.Employer, L2SNS.ProfileFeedback> FeedbackReceived 
		{	
			get { return _feedbackReceived; }		
		}				
		public IntermediateEntityReference<projectNS.Employer, projectNS.Account, intermediateNS.Employer, intermediateNS.Account, L2SNS.Employer, L2SNS.Account> _account;
		public intermediateNS.Account Account
		{	
			get { return _account.Value; }
			set { _account.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Employer, projectNS.Tenant, intermediateNS.Employer, intermediateNS.Tenant, L2SNS.Employer, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Employer()
		{
			__tableEntity = new L2SNS.Employer();
			initFields();
		}
		
		public Employer(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Employer();
			initFields();
			
			this.Deserialize<projectNS.Employer, Employer, pocoNS.Employer>(info);
			
		}
			
		public Employer(L2SNS.Employer tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, long>(this, t => t.Id, (t, val) => t.Id = val);
			_accountId = new EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, long>(this, t => t.AccountId, (t, val) => t.AccountId = val);
			_city = new EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, string>(this, t => t.City, (t, val) => t.City = val);
			_country = new EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, string>(this, t => t.Country, (t, val) => t.Country = val);
			_isVerified = new EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, bool>(this, t => t.IsVerified, (t, val) => t.IsVerified = val);
			_name = new EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, string>(this, t => t.Name, (t, val) => t.Name = val);
			_picture = new EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, string>(this, t => t.Picture, (t, val) => t.Picture = val);
			_tenantId = new EntityField<projectNS.Employer, intermediateNS.Employer, L2SNS.Employer, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_projects = new IntermediateEntityCollection<projectNS.Employer, projectNS.Project, intermediateNS.Employer, intermediateNS.Project, L2SNS.Employer, L2SNS.Project>(this, __project => __project._employer);
			_feedbackGiven = new IntermediateEntityCollection<projectNS.Employer, projectNS.EmployerFeedback, intermediateNS.Employer, intermediateNS.EmployerFeedback, L2SNS.Employer, L2SNS.EmployerFeedback>(this, __employerfeedback => __employerfeedback._employer);
			_feedbackReceived = new IntermediateEntityCollection<projectNS.Employer, projectNS.ProfileFeedback, intermediateNS.Employer, intermediateNS.ProfileFeedback, L2SNS.Employer, L2SNS.ProfileFeedback>(this, __profilefeedback => __profilefeedback._employer);
			_account = new IntermediateEntityReference<projectNS.Employer, projectNS.Account, intermediateNS.Employer, intermediateNS.Account, L2SNS.Employer, L2SNS.Account>(this, __e => __e.Account, (__e, __account) => __e.Account = __account, __account => __account._employer, false);
			_tenant = new IntermediateEntityReference<projectNS.Employer, projectNS.Tenant, intermediateNS.Employer, intermediateNS.Tenant, L2SNS.Employer, L2SNS.Tenant>(this, __e => __e.Tenant, (__e, __tenant) => __e.Tenant = __tenant, __tenant => __tenant._employers, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Projects":
					return Projects.IsLoaded;
				case "FeedbackGiven":
					return FeedbackGiven.IsLoaded;
				case "FeedbackReceived":
					return FeedbackReceived.IsLoaded;
				case "Account":
                	return _account.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class Employer : ITableEntity<intermediateNS.Employer>
	{
        public intermediateNS.Employer _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Employer;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class EmployerFeedbackMapping : ModelEntityMapping<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback>
	{
		public EmployerFeedbackMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Company>(e => e.Company, e => e.FeedbackReceived);
			AddRelationship<projectNS.Employer>(e => e.Employer, e => e.FeedbackGiven);
			AddRelationship<projectNS.Project>(e => e.Project, e => e.EmployerFeedback);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.EmployerFeedbacks);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(EmployerFeedbackMapping))]
	public partial class EmployerFeedback : EntityBase, IModelEntity<intermediateNS.EmployerFeedback>	
	{
		private intermediateNS.EmployerFeedback __intermediateEntity;
		public intermediateNS.EmployerFeedback _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.EmployerFeedback intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long CompanyId 
		{	
			get { return _intermediateEntity.CompanyId; }
			set { _intermediateEntity.CompanyId = value; }
		}
		public virtual long EmployerId 
		{	
			get { return _intermediateEntity.EmployerId; }
			set { _intermediateEntity.EmployerId = value; }
		}
		public virtual long ProjectId 
		{	
			get { return _intermediateEntity.ProjectId; }
			set { _intermediateEntity.ProjectId = value; }
		}
		public virtual string Rating 
		{	
			get { return _intermediateEntity.Rating; }
			set { _intermediateEntity.Rating = value; }
		}
		public virtual string Text 
		{	
			get { return _intermediateEntity.Text; }
			set { _intermediateEntity.Text = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public Company Company 
		{	
			get { return _intermediateEntity.Company.GetEntity(); }
			set { if (value != null) _intermediateEntity.Company = value._intermediateEntity; else _intermediateEntity.Company = null; }
		}
		public Employer Employer 
		{	
			get { return _intermediateEntity.Employer.GetEntity(); }
			set { if (value != null) _intermediateEntity.Employer = value._intermediateEntity; else _intermediateEntity.Employer = null; }
		}
		public Project Project 
		{	
			get { return _intermediateEntity.Project.GetEntity(); }
			set { if (value != null) _intermediateEntity.Project = value._intermediateEntity; else _intermediateEntity.Project = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public EmployerFeedback() : this(new intermediateNS.EmployerFeedback())
		{
		}
			
		public EmployerFeedback(intermediateNS.EmployerFeedback intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public EmployerFeedback(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.EmployerFeedback(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<EmployerFeedback, pocoNS.EmployerFeedback>(info);
		}

		public static bool operator ==(EmployerFeedback a, EmployerFeedback b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(EmployerFeedback a, EmployerFeedback b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((EmployerFeedback)this)._equals(obj as EmployerFeedback);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.EmployerFeedback ToPOCO()
		{
			return this.CreatePOCO<EmployerFeedback, pocoNS.EmployerFeedback>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class EmployerFeedback : IPOCO<projectNS.EmployerFeedback>	{


		public long Id { get; set; }
		public long CompanyId { get; set; }
		public long EmployerId { get; set; }
		public long ProjectId { get; set; }
		public string Rating { get; set; }
		public string Text { get; set; }
		public long TenantId { get; set; }
		public POCOReference Company { get; set; }

		public POCOReference Employer { get; set; }

		public POCOReference Project { get; set; }

		public POCOReference Tenant { get; set; }

			
		public EmployerFeedback()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class EmployerFeedback : IntermediateEntity<projectNS.EmployerFeedback, L2SNS.EmployerFeedback>
	{
		//Fields				
		public PrimaryKeyField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, long> _companyId;
		public long CompanyId 
		{	
			get { return _companyId.Value; }
			set { _companyId.Value = value; }
		}
		public EntityField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, long> _employerId;
		public long EmployerId 
		{	
			get { return _employerId.Value; }
			set { _employerId.Value = value; }
		}
		public EntityField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, long> _projectId;
		public long ProjectId 
		{	
			get { return _projectId.Value; }
			set { _projectId.Value = value; }
		}
		public EntityField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, string> _rating;
		public string Rating 
		{	
			get { return _rating.Value; }
			set { _rating.Value = value; }
		}
		public EntityField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, string> _text;
		public string Text 
		{	
			get { return _text.Value; }
			set { _text.Value = value; }
		}
		public EntityField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.EmployerFeedback, projectNS.Company, intermediateNS.EmployerFeedback, intermediateNS.Company, L2SNS.EmployerFeedback, L2SNS.Company> _company;
		public intermediateNS.Company Company
		{	
			get { return _company.Value; }
			set { _company.Value = value; }
		}
		public IntermediateEntityReference<projectNS.EmployerFeedback, projectNS.Employer, intermediateNS.EmployerFeedback, intermediateNS.Employer, L2SNS.EmployerFeedback, L2SNS.Employer> _employer;
		public intermediateNS.Employer Employer
		{	
			get { return _employer.Value; }
			set { _employer.Value = value; }
		}
		public IntermediateEntityReference<projectNS.EmployerFeedback, projectNS.Project, intermediateNS.EmployerFeedback, intermediateNS.Project, L2SNS.EmployerFeedback, L2SNS.Project> _project;
		public intermediateNS.Project Project
		{	
			get { return _project.Value; }
			set { _project.Value = value; }
		}
		public IntermediateEntityReference<projectNS.EmployerFeedback, projectNS.Tenant, intermediateNS.EmployerFeedback, intermediateNS.Tenant, L2SNS.EmployerFeedback, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public EmployerFeedback()
		{
			__tableEntity = new L2SNS.EmployerFeedback();
			initFields();
		}
		
		public EmployerFeedback(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.EmployerFeedback();
			initFields();
			
			this.Deserialize<projectNS.EmployerFeedback, EmployerFeedback, pocoNS.EmployerFeedback>(info);
			
		}
			
		public EmployerFeedback(L2SNS.EmployerFeedback tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, long>(this, t => t.Id, (t, val) => t.Id = val);
			_companyId = new EntityField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, long>(this, t => t.CompanyId, (t, val) => t.CompanyId = val);
			_employerId = new EntityField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, long>(this, t => t.EmployerId, (t, val) => t.EmployerId = val);
			_projectId = new EntityField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, long>(this, t => t.ProjectId, (t, val) => t.ProjectId = val);
			_rating = new EntityField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, string>(this, t => t.Rating, (t, val) => t.Rating = val);
			_text = new EntityField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, string>(this, t => t.Text, (t, val) => t.Text = val);
			_tenantId = new EntityField<projectNS.EmployerFeedback, intermediateNS.EmployerFeedback, L2SNS.EmployerFeedback, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_company = new IntermediateEntityReference<projectNS.EmployerFeedback, projectNS.Company, intermediateNS.EmployerFeedback, intermediateNS.Company, L2SNS.EmployerFeedback, L2SNS.Company>(this, __e => __e.Company, (__e, __company) => __e.Company = __company, __company => __company._feedbackReceived, false);
			_employer = new IntermediateEntityReference<projectNS.EmployerFeedback, projectNS.Employer, intermediateNS.EmployerFeedback, intermediateNS.Employer, L2SNS.EmployerFeedback, L2SNS.Employer>(this, __e => __e.Employer, (__e, __employer) => __e.Employer = __employer, __employer => __employer._feedbackGiven, false);
			_project = new IntermediateEntityReference<projectNS.EmployerFeedback, projectNS.Project, intermediateNS.EmployerFeedback, intermediateNS.Project, L2SNS.EmployerFeedback, L2SNS.Project>(this, __e => __e.Project, (__e, __project) => __e.Project = __project, __project => __project._employerFeedback, false);
			_tenant = new IntermediateEntityReference<projectNS.EmployerFeedback, projectNS.Tenant, intermediateNS.EmployerFeedback, intermediateNS.Tenant, L2SNS.EmployerFeedback, L2SNS.Tenant>(this, __e => __e.Tenant, (__e, __tenant) => __e.Tenant = __tenant, __tenant => __tenant._employerFeedbacks, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Company":
                	return _company.IsLoaded;
				case "Employer":
                	return _employer.IsLoaded;
				case "Project":
                	return _project.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class EmployerFeedback : ITableEntity<intermediateNS.EmployerFeedback>
	{
        public intermediateNS.EmployerFeedback _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.EmployerFeedback;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class PortfolioEntryMapping : ModelEntityMapping<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry>
	{
		public PortfolioEntryMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Company>(e => e.Company, e => e.Portfolio);
			AddRelationship<projectNS.Project>(e => e.Project, e => e.PortfolioEntry);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.PortfolioEntries);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(PortfolioEntryMapping))]
	public partial class PortfolioEntry : EntityBase, IModelEntity<intermediateNS.PortfolioEntry>	
	{
		private intermediateNS.PortfolioEntry __intermediateEntity;
		public intermediateNS.PortfolioEntry _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.PortfolioEntry intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long CompanyId 
		{	
			get { return _intermediateEntity.CompanyId; }
			set { _intermediateEntity.CompanyId = value; }
		}
		public virtual string Content 
		{	
			get { return _intermediateEntity.Content; }
			set { _intermediateEntity.Content = value; }
		}
		public virtual string Description 
		{	
			get { return _intermediateEntity.Description; }
			set { _intermediateEntity.Description = value; }
		}
		public virtual string Image 
		{	
			get { return _intermediateEntity.Image; }
			set { _intermediateEntity.Image = value; }
		}
		public virtual long? ProjectId 
		{	
			get { return _intermediateEntity.ProjectId; }
			set { _intermediateEntity.ProjectId = value; }
		}
		public virtual string Title 
		{	
			get { return _intermediateEntity.Title; }
			set { _intermediateEntity.Title = value; }
		}
		public virtual string Type 
		{	
			get { return _intermediateEntity.Type; }
			set { _intermediateEntity.Type = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public Company Company 
		{	
			get { return _intermediateEntity.Company.GetEntity(); }
			set { if (value != null) _intermediateEntity.Company = value._intermediateEntity; else _intermediateEntity.Company = null; }
		}
		public Project Project 
		{	
			get { return _intermediateEntity.Project.GetEntity(); }
			set { if (value != null) _intermediateEntity.Project = value._intermediateEntity; else _intermediateEntity.Project = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public PortfolioEntry() : this(new intermediateNS.PortfolioEntry())
		{
		}
			
		public PortfolioEntry(intermediateNS.PortfolioEntry intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public PortfolioEntry(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.PortfolioEntry(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<PortfolioEntry, pocoNS.PortfolioEntry>(info);
		}

		public static bool operator ==(PortfolioEntry a, PortfolioEntry b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(PortfolioEntry a, PortfolioEntry b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((PortfolioEntry)this)._equals(obj as PortfolioEntry);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.PortfolioEntry ToPOCO()
		{
			return this.CreatePOCO<PortfolioEntry, pocoNS.PortfolioEntry>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class PortfolioEntry : IPOCO<projectNS.PortfolioEntry>	{


		public long Id { get; set; }
		public long CompanyId { get; set; }
		public string Content { get; set; }
		public string Description { get; set; }
		public string Image { get; set; }
		public long? ProjectId { get; set; }
		public string Title { get; set; }
		public string Type { get; set; }
		public long TenantId { get; set; }
		public POCOReference Company { get; set; }

		public POCOReference Project { get; set; }

		public POCOReference Tenant { get; set; }

			
		public PortfolioEntry()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class PortfolioEntry : IntermediateEntity<projectNS.PortfolioEntry, L2SNS.PortfolioEntry>
	{
		//Fields				
		public PrimaryKeyField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, long> _companyId;
		public long CompanyId 
		{	
			get { return _companyId.Value; }
			set { _companyId.Value = value; }
		}
		public EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, string> _content;
		public string Content 
		{	
			get { return _content.Value; }
			set { _content.Value = value; }
		}
		public EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, string> _description;
		public string Description 
		{	
			get { return _description.Value; }
			set { _description.Value = value; }
		}
		public EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, string> _image;
		public string Image 
		{	
			get { return _image.Value; }
			set { _image.Value = value; }
		}
		public EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, long?> _projectId;
		public long? ProjectId 
		{	
			get { return _projectId.Value; }
			set { _projectId.Value = value; }
		}
		public EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, string> _title;
		public string Title 
		{	
			get { return _title.Value; }
			set { _title.Value = value; }
		}
		public EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, string> _type;
		public string Type 
		{	
			get { return _type.Value; }
			set { _type.Value = value; }
		}
		public EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.PortfolioEntry, projectNS.Company, intermediateNS.PortfolioEntry, intermediateNS.Company, L2SNS.PortfolioEntry, L2SNS.Company> _company;
		public intermediateNS.Company Company
		{	
			get { return _company.Value; }
			set { _company.Value = value; }
		}
		public IntermediateEntityReference<projectNS.PortfolioEntry, projectNS.Project, intermediateNS.PortfolioEntry, intermediateNS.Project, L2SNS.PortfolioEntry, L2SNS.Project> _project;
		public intermediateNS.Project Project
		{	
			get { return _project.Value; }
			set { _project.Value = value; }
		}
		public IntermediateEntityReference<projectNS.PortfolioEntry, projectNS.Tenant, intermediateNS.PortfolioEntry, intermediateNS.Tenant, L2SNS.PortfolioEntry, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public PortfolioEntry()
		{
			__tableEntity = new L2SNS.PortfolioEntry();
			initFields();
		}
		
		public PortfolioEntry(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.PortfolioEntry();
			initFields();
			
			this.Deserialize<projectNS.PortfolioEntry, PortfolioEntry, pocoNS.PortfolioEntry>(info);
			
		}
			
		public PortfolioEntry(L2SNS.PortfolioEntry tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, long>(this, t => t.Id, (t, val) => t.Id = val);
			_companyId = new EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, long>(this, t => t.CompanyId, (t, val) => t.CompanyId = val);
			_content = new EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, string>(this, t => t.Content, (t, val) => t.Content = val);
			_description = new EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, string>(this, t => t.Description, (t, val) => t.Description = val);
			_image = new EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, string>(this, t => t.Image, (t, val) => t.Image = val);
			_projectId = new EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, long?>(this, t => t.ProjectId, (t, val) => t.ProjectId = val);
			_title = new EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, string>(this, t => t.Title, (t, val) => t.Title = val);
			_type = new EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, string>(this, t => t.Type, (t, val) => t.Type = val);
			_tenantId = new EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_company = new IntermediateEntityReference<projectNS.PortfolioEntry, projectNS.Company, intermediateNS.PortfolioEntry, intermediateNS.Company, L2SNS.PortfolioEntry, L2SNS.Company>(this, __p => __p.Company, (__p, __company) => __p.Company = __company, __company => __company._portfolio, false);
			_project = new IntermediateEntityReference<projectNS.PortfolioEntry, projectNS.Project, intermediateNS.PortfolioEntry, intermediateNS.Project, L2SNS.PortfolioEntry, L2SNS.Project>(this, __p => __p.Project, (__p, __project) => __p.Project = __project, __project => __project._portfolioEntry, true);
			_tenant = new IntermediateEntityReference<projectNS.PortfolioEntry, projectNS.Tenant, intermediateNS.PortfolioEntry, intermediateNS.Tenant, L2SNS.PortfolioEntry, L2SNS.Tenant>(this, __p => __p.Tenant, (__p, __tenant) => __p.Tenant = __tenant, __tenant => __tenant._portfolioEntries, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Company":
                	return _company.IsLoaded;
				case "Project":
                	return _project.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class PortfolioEntry : ITableEntity<intermediateNS.PortfolioEntry>
	{
        public intermediateNS.PortfolioEntry _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.PortfolioEntry;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class ProfileFeedbackMapping : ModelEntityMapping<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback>
	{
		public ProfileFeedbackMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Company>(e => e.Company, e => e.FeedbackGiven);
			AddRelationship<projectNS.Employer>(e => e.Employer, e => e.FeedbackReceived);
			AddRelationship<projectNS.Project>(e => e.Project, e => e.ProfileFeedback);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(ProfileFeedbackMapping))]
	public partial class ProfileFeedback : EntityBase, IModelEntity<intermediateNS.ProfileFeedback>	
	{
		private intermediateNS.ProfileFeedback __intermediateEntity;
		public intermediateNS.ProfileFeedback _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.ProfileFeedback intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long CompanyId 
		{	
			get { return _intermediateEntity.CompanyId; }
			set { _intermediateEntity.CompanyId = value; }
		}
		public virtual long EmployerId 
		{	
			get { return _intermediateEntity.EmployerId; }
			set { _intermediateEntity.EmployerId = value; }
		}
		public virtual long ProjectId 
		{	
			get { return _intermediateEntity.ProjectId; }
			set { _intermediateEntity.ProjectId = value; }
		}
		public virtual string Rating 
		{	
			get { return _intermediateEntity.Rating; }
			set { _intermediateEntity.Rating = value; }
		}
		public virtual string Text 
		{	
			get { return _intermediateEntity.Text; }
			set { _intermediateEntity.Text = value; }
		}
			
		//Navigation Properties
		public Company Company 
		{	
			get { return _intermediateEntity.Company.GetEntity(); }
			set { if (value != null) _intermediateEntity.Company = value._intermediateEntity; else _intermediateEntity.Company = null; }
		}
		public Employer Employer 
		{	
			get { return _intermediateEntity.Employer.GetEntity(); }
			set { if (value != null) _intermediateEntity.Employer = value._intermediateEntity; else _intermediateEntity.Employer = null; }
		}
		public Project Project 
		{	
			get { return _intermediateEntity.Project.GetEntity(); }
			set { if (value != null) _intermediateEntity.Project = value._intermediateEntity; else _intermediateEntity.Project = null; }
		}
		public ProfileFeedback() : this(new intermediateNS.ProfileFeedback())
		{
		}
			
		public ProfileFeedback(intermediateNS.ProfileFeedback intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public ProfileFeedback(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.ProfileFeedback(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<ProfileFeedback, pocoNS.ProfileFeedback>(info);
		}

		public static bool operator ==(ProfileFeedback a, ProfileFeedback b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(ProfileFeedback a, ProfileFeedback b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((ProfileFeedback)this)._equals(obj as ProfileFeedback);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.ProfileFeedback ToPOCO()
		{
			return this.CreatePOCO<ProfileFeedback, pocoNS.ProfileFeedback>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class ProfileFeedback : IPOCO<projectNS.ProfileFeedback>	{


		public long Id { get; set; }
		public long CompanyId { get; set; }
		public long EmployerId { get; set; }
		public long ProjectId { get; set; }
		public string Rating { get; set; }
		public string Text { get; set; }
		public POCOReference Company { get; set; }

		public POCOReference Employer { get; set; }

		public POCOReference Project { get; set; }

			
		public ProfileFeedback()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class ProfileFeedback : IntermediateEntity<projectNS.ProfileFeedback, L2SNS.ProfileFeedback>
	{
		//Fields				
		public PrimaryKeyField<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback, long> _companyId;
		public long CompanyId 
		{	
			get { return _companyId.Value; }
			set { _companyId.Value = value; }
		}
		public EntityField<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback, long> _employerId;
		public long EmployerId 
		{	
			get { return _employerId.Value; }
			set { _employerId.Value = value; }
		}
		public EntityField<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback, long> _projectId;
		public long ProjectId 
		{	
			get { return _projectId.Value; }
			set { _projectId.Value = value; }
		}
		public EntityField<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback, string> _rating;
		public string Rating 
		{	
			get { return _rating.Value; }
			set { _rating.Value = value; }
		}
		public EntityField<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback, string> _text;
		public string Text 
		{	
			get { return _text.Value; }
			set { _text.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.ProfileFeedback, projectNS.Company, intermediateNS.ProfileFeedback, intermediateNS.Company, L2SNS.ProfileFeedback, L2SNS.Company> _company;
		public intermediateNS.Company Company
		{	
			get { return _company.Value; }
			set { _company.Value = value; }
		}
		public IntermediateEntityReference<projectNS.ProfileFeedback, projectNS.Employer, intermediateNS.ProfileFeedback, intermediateNS.Employer, L2SNS.ProfileFeedback, L2SNS.Employer> _employer;
		public intermediateNS.Employer Employer
		{	
			get { return _employer.Value; }
			set { _employer.Value = value; }
		}
		public IntermediateEntityReference<projectNS.ProfileFeedback, projectNS.Project, intermediateNS.ProfileFeedback, intermediateNS.Project, L2SNS.ProfileFeedback, L2SNS.Project> _project;
		public intermediateNS.Project Project
		{	
			get { return _project.Value; }
			set { _project.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public ProfileFeedback()
		{
			__tableEntity = new L2SNS.ProfileFeedback();
			initFields();
		}
		
		public ProfileFeedback(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.ProfileFeedback();
			initFields();
			
			this.Deserialize<projectNS.ProfileFeedback, ProfileFeedback, pocoNS.ProfileFeedback>(info);
			
		}
			
		public ProfileFeedback(L2SNS.ProfileFeedback tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback, long>(this, t => t.Id, (t, val) => t.Id = val);
			_companyId = new EntityField<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback, long>(this, t => t.CompanyId, (t, val) => t.CompanyId = val);
			_employerId = new EntityField<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback, long>(this, t => t.EmployerId, (t, val) => t.EmployerId = val);
			_projectId = new EntityField<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback, long>(this, t => t.ProjectId, (t, val) => t.ProjectId = val);
			_rating = new EntityField<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback, string>(this, t => t.Rating, (t, val) => t.Rating = val);
			_text = new EntityField<projectNS.ProfileFeedback, intermediateNS.ProfileFeedback, L2SNS.ProfileFeedback, string>(this, t => t.Text, (t, val) => t.Text = val);
			_company = new IntermediateEntityReference<projectNS.ProfileFeedback, projectNS.Company, intermediateNS.ProfileFeedback, intermediateNS.Company, L2SNS.ProfileFeedback, L2SNS.Company>(this, __p => __p.Company, (__p, __company) => __p.Company = __company, __company => __company._feedbackGiven, false);
			_employer = new IntermediateEntityReference<projectNS.ProfileFeedback, projectNS.Employer, intermediateNS.ProfileFeedback, intermediateNS.Employer, L2SNS.ProfileFeedback, L2SNS.Employer>(this, __p => __p.Employer, (__p, __employer) => __p.Employer = __employer, __employer => __employer._feedbackReceived, false);
			_project = new IntermediateEntityReference<projectNS.ProfileFeedback, projectNS.Project, intermediateNS.ProfileFeedback, intermediateNS.Project, L2SNS.ProfileFeedback, L2SNS.Project>(this, __p => __p.Project, (__p, __project) => __p.Project = __project, __project => __project._profileFeedback, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Company":
                	return _company.IsLoaded;
				case "Employer":
                	return _employer.IsLoaded;
				case "Project":
                	return _project.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class ProfileFeedback : ITableEntity<intermediateNS.ProfileFeedback>
	{
        public intermediateNS.ProfileFeedback _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.ProfileFeedback;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class ProjectMapping : ModelEntityMapping<projectNS.Project, intermediateNS.Project, L2SNS.Project>
	{
		public ProjectMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddManyToManyRelationship<projectNS.Attachment, ProjectAttachmentMap>(e => e.Attachments, map => map.Attachment, map => map.Project);
			AddManyToManyRelationship<projectNS.Tag, ProjectTagMap>(e => e.Tags, map => map.Tag, map => map.Project);
			AddRelationship<projectNS.Employer>(e => e.Employer, e => e.Projects);
			AddRelationship<projectNS.EmployerFeedback>(e => e.EmployerFeedback, e => e.Project);
			AddRelationship<projectNS.ProfileFeedback>(e => e.ProfileFeedback, e => e.Project);
			AddRelationship<projectNS.ProjectInvite>(e => e.ProjectInvites, e => e.Project);
			AddRelationship<projectNS.Bid>(e => e.Bids, e => e.Project);
			AddRelationship<projectNS.PortfolioEntry>(e => e.PortfolioEntry, e => e.Project);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Projects);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(ProjectMapping))]
	public partial class Project : EntityBase, IModelEntity<intermediateNS.Project>	
	{
		private intermediateNS.Project __intermediateEntity;
		public intermediateNS.Project _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Project intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual int Budget 
		{	
			get { return _intermediateEntity.Budget; }
			set { _intermediateEntity.Budget = value; }
		}
		public virtual DateTime ClosingDate 
		{	
			get { return _intermediateEntity.ClosingDate; }
			set { _intermediateEntity.ClosingDate = value; }
		}
		public virtual string Currency 
		{	
			get { return _intermediateEntity.Currency; }
			set { _intermediateEntity.Currency = value; }
		}
		public virtual DateTime DateAdded 
		{	
			get { return _intermediateEntity.DateAdded; }
			set { _intermediateEntity.DateAdded = value; }
		}
		public virtual string Description 
		{	
			get { return _intermediateEntity.Description; }
			set { _intermediateEntity.Description = value; }
		}
		public virtual string DescriptionText 
		{	
			get { return _intermediateEntity.DescriptionText; }
			set { _intermediateEntity.DescriptionText = value; }
		}
		public virtual long EmployerId 
		{	
			get { return _intermediateEntity.EmployerId; }
			set { _intermediateEntity.EmployerId = value; }
		}
		public virtual string Status 
		{	
			get { return _intermediateEntity.Status; }
			set { _intermediateEntity.Status = value; }
		}
		public virtual string Title 
		{	
			get { return _intermediateEntity.Title; }
			set { _intermediateEntity.Title = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.Attachment> Attachments 
		{	
			get { return _intermediateEntity.Attachments.EntityCollection; }
		}		
		public ICollection<projectNS.Tag> Tags 
		{	
			get { return _intermediateEntity.Tags.EntityCollection; }
		}		
		public Employer Employer 
		{	
			get { return _intermediateEntity.Employer.GetEntity(); }
			set { if (value != null) _intermediateEntity.Employer = value._intermediateEntity; else _intermediateEntity.Employer = null; }
		}
		public EmployerFeedback EmployerFeedback 
		{	
			get { return _intermediateEntity.EmployerFeedback.GetEntity(); }
			set { if (value != null) _intermediateEntity.EmployerFeedback = value._intermediateEntity; else _intermediateEntity.EmployerFeedback = null; }
		}
		public ProfileFeedback ProfileFeedback 
		{	
			get { return _intermediateEntity.ProfileFeedback.GetEntity(); }
			set { if (value != null) _intermediateEntity.ProfileFeedback = value._intermediateEntity; else _intermediateEntity.ProfileFeedback = null; }
		}
		public ICollection<projectNS.ProjectInvite> ProjectInvites 
		{	
			get { return _intermediateEntity.ProjectInvites.EntityCollection; }
		}		
		public ICollection<projectNS.Bid> Bids 
		{	
			get { return _intermediateEntity.Bids.EntityCollection; }
		}		
		public PortfolioEntry PortfolioEntry 
		{	
			get { return _intermediateEntity.PortfolioEntry.GetEntity(); }
			set { if (value != null) _intermediateEntity.PortfolioEntry = value._intermediateEntity; else _intermediateEntity.PortfolioEntry = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Project() : this(new intermediateNS.Project())
		{
		}
			
		public Project(intermediateNS.Project intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Project(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Project(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Project, pocoNS.Project>(info);
		}

		public static bool operator ==(Project a, Project b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Project a, Project b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Project)this)._equals(obj as Project);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Project ToPOCO()
		{
			return this.CreatePOCO<Project, pocoNS.Project>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class Project : IPOCO<projectNS.Project>	{


		public long Id { get; set; }
		public int Budget { get; set; }
		public DateTime ClosingDate { get; set; }
		public string Currency { get; set; }
		public DateTime DateAdded { get; set; }
		public string Description { get; set; }
		public string DescriptionText { get; set; }
		public long EmployerId { get; set; }
		public string Status { get; set; }
		public string Title { get; set; }
		public long TenantId { get; set; }
		public POCOCollection Attachments { get; set; }

		public POCOCollection Tags { get; set; }

		public POCOReference Employer { get; set; }

		public POCOReference EmployerFeedback { get; set; }

		public POCOReference ProfileFeedback { get; set; }

		public POCOCollection ProjectInvites { get; set; }

		public POCOCollection Bids { get; set; }

		public POCOReference PortfolioEntry { get; set; }

		public POCOReference Tenant { get; set; }

			
		public Project()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class Project : IntermediateEntity<projectNS.Project, L2SNS.Project>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Project, intermediateNS.Project, L2SNS.Project, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, int> _budget;
		public int Budget 
		{	
			get { return _budget.Value; }
			set { _budget.Value = value; }
		}
		public EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, DateTime> _closingDate;
		public DateTime ClosingDate 
		{	
			get { return _closingDate.Value; }
			set { _closingDate.Value = value; }
		}
		public EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, string> _currency;
		public string Currency 
		{	
			get { return _currency.Value; }
			set { _currency.Value = value; }
		}
		public EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, DateTime> _dateAdded;
		public DateTime DateAdded 
		{	
			get { return _dateAdded.Value; }
			set { _dateAdded.Value = value; }
		}
		public EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, string> _description;
		public string Description 
		{	
			get { return _description.Value; }
			set { _description.Value = value; }
		}
		public EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, string> _descriptionText;
		public string DescriptionText 
		{	
			get { return _descriptionText.Value; }
			set { _descriptionText.Value = value; }
		}
		public EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, long> _employerId;
		public long EmployerId 
		{	
			get { return _employerId.Value; }
			set { _employerId.Value = value; }
		}
		public EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, string> _status;
		public string Status 
		{	
			get { return _status.Value; }
			set { _status.Value = value; }
		}
		public EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, string> _title;
		public string Title 
		{	
			get { return _title.Value; }
			set { _title.Value = value; }
		}
		public EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateManyToManyCollection<projectNS.Project, projectNS.Attachment, projectNS.ProjectAttachmentMap, intermediateNS.Project, intermediateNS.Attachment, intermediateNS.ProjectAttachmentMap, L2SNS.Project, L2SNS.Attachment, L2SNS.ProjectAttachmentMap> _attachments;
		public IntermediateManyToManyCollection<projectNS.Project, projectNS.Attachment, projectNS.ProjectAttachmentMap, intermediateNS.Project, intermediateNS.Attachment, intermediateNS.ProjectAttachmentMap, L2SNS.Project, L2SNS.Attachment, L2SNS.ProjectAttachmentMap> Attachments 
		{	
			get { return _attachments; }		
		}
		public IntermediateManyToManyCollection<projectNS.Project, projectNS.Tag, projectNS.ProjectTagMap, intermediateNS.Project, intermediateNS.Tag, intermediateNS.ProjectTagMap, L2SNS.Project, L2SNS.Tag, L2SNS.ProjectTagMap> _tags;
		public IntermediateManyToManyCollection<projectNS.Project, projectNS.Tag, projectNS.ProjectTagMap, intermediateNS.Project, intermediateNS.Tag, intermediateNS.ProjectTagMap, L2SNS.Project, L2SNS.Tag, L2SNS.ProjectTagMap> Tags 
		{	
			get { return _tags; }		
		}
		public IntermediateEntityReference<projectNS.Project, projectNS.Employer, intermediateNS.Project, intermediateNS.Employer, L2SNS.Project, L2SNS.Employer> _employer;
		public intermediateNS.Employer Employer
		{	
			get { return _employer.Value; }
			set { _employer.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Project, projectNS.EmployerFeedback, intermediateNS.Project, intermediateNS.EmployerFeedback, L2SNS.Project, L2SNS.EmployerFeedback> _employerFeedback;
		public intermediateNS.EmployerFeedback EmployerFeedback
		{	
			get { return _employerFeedback.Value; }
			set { _employerFeedback.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Project, projectNS.ProfileFeedback, intermediateNS.Project, intermediateNS.ProfileFeedback, L2SNS.Project, L2SNS.ProfileFeedback> _profileFeedback;
		public intermediateNS.ProfileFeedback ProfileFeedback
		{	
			get { return _profileFeedback.Value; }
			set { _profileFeedback.Value = value; }
		}
		public IntermediateEntityCollection<projectNS.Project, projectNS.ProjectInvite, intermediateNS.Project, intermediateNS.ProjectInvite, L2SNS.Project, L2SNS.ProjectInvite> _projectInvites;
		public IntermediateEntityCollection<projectNS.Project, projectNS.ProjectInvite, intermediateNS.Project, intermediateNS.ProjectInvite, L2SNS.Project, L2SNS.ProjectInvite> ProjectInvites 
		{	
			get { return _projectInvites; }		
		}				
		public IntermediateEntityCollection<projectNS.Project, projectNS.Bid, intermediateNS.Project, intermediateNS.Bid, L2SNS.Project, L2SNS.Bid> _bids;
		public IntermediateEntityCollection<projectNS.Project, projectNS.Bid, intermediateNS.Project, intermediateNS.Bid, L2SNS.Project, L2SNS.Bid> Bids 
		{	
			get { return _bids; }		
		}				
		public IntermediateEntityReference<projectNS.Project, projectNS.PortfolioEntry, intermediateNS.Project, intermediateNS.PortfolioEntry, L2SNS.Project, L2SNS.PortfolioEntry> _portfolioEntry;
		public intermediateNS.PortfolioEntry PortfolioEntry
		{	
			get { return _portfolioEntry.Value; }
			set { _portfolioEntry.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Project, projectNS.Tenant, intermediateNS.Project, intermediateNS.Tenant, L2SNS.Project, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Project()
		{
			__tableEntity = new L2SNS.Project();
			initFields();
		}
		
		public Project(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Project();
			initFields();
			
			this.Deserialize<projectNS.Project, Project, pocoNS.Project>(info);
			
		}
			
		public Project(L2SNS.Project tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Project, intermediateNS.Project, L2SNS.Project, long>(this, t => t.Id, (t, val) => t.Id = val);
			_budget = new EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, int>(this, t => t.Budget, (t, val) => t.Budget = val);
			_closingDate = new EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, DateTime>(this, t => t.ClosingDate, (t, val) => t.ClosingDate = val);
			_currency = new EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, string>(this, t => t.Currency, (t, val) => t.Currency = val);
			_dateAdded = new EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, DateTime>(this, t => t.DateAdded, (t, val) => t.DateAdded = val);
			_description = new EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, string>(this, t => t.Description, (t, val) => t.Description = val);
			_descriptionText = new EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, string>(this, t => t.DescriptionText, (t, val) => t.DescriptionText = val);
			_employerId = new EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, long>(this, t => t.EmployerId, (t, val) => t.EmployerId = val);
			_status = new EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, string>(this, t => t.Status, (t, val) => t.Status = val);
			_title = new EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, string>(this, t => t.Title, (t, val) => t.Title = val);
			_tenantId = new EntityField<projectNS.Project, intermediateNS.Project, L2SNS.Project, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_attachments = new IntermediateManyToManyCollection<projectNS.Project, projectNS.Attachment, projectNS.ProjectAttachmentMap, intermediateNS.Project, intermediateNS.Attachment, intermediateNS.ProjectAttachmentMap, L2SNS.Project, L2SNS.Attachment, L2SNS.ProjectAttachmentMap>(this, __map => __map.Attachment, __map => __map.Project, (__map, __p) => __map.Attachment = __p, (__map, __attachment) => __map.Project = __attachment, __attachment => __attachment._projects);
			_tags = new IntermediateManyToManyCollection<projectNS.Project, projectNS.Tag, projectNS.ProjectTagMap, intermediateNS.Project, intermediateNS.Tag, intermediateNS.ProjectTagMap, L2SNS.Project, L2SNS.Tag, L2SNS.ProjectTagMap>(this, __map => __map.Tag, __map => __map.Project, (__map, __p) => __map.Tag = __p, (__map, __tag) => __map.Project = __tag, __tag => __tag._projects);
			_employer = new IntermediateEntityReference<projectNS.Project, projectNS.Employer, intermediateNS.Project, intermediateNS.Employer, L2SNS.Project, L2SNS.Employer>(this, __p => __p.Employer, (__p, __employer) => __p.Employer = __employer, __employer => __employer._projects, false);
			_employerFeedback = new IntermediateEntityReference<projectNS.Project, projectNS.EmployerFeedback, intermediateNS.Project, intermediateNS.EmployerFeedback, L2SNS.Project, L2SNS.EmployerFeedback>(this, __p => __p.EmployerFeedback, (__p, __employerfeedback) => __p.EmployerFeedback = __employerfeedback, __employerfeedback => __employerfeedback._project, false);
			_profileFeedback = new IntermediateEntityReference<projectNS.Project, projectNS.ProfileFeedback, intermediateNS.Project, intermediateNS.ProfileFeedback, L2SNS.Project, L2SNS.ProfileFeedback>(this, __p => __p.ProfileFeedback, (__p, __profilefeedback) => __p.ProfileFeedback = __profilefeedback, __profilefeedback => __profilefeedback._project, false);
			_projectInvites = new IntermediateEntityCollection<projectNS.Project, projectNS.ProjectInvite, intermediateNS.Project, intermediateNS.ProjectInvite, L2SNS.Project, L2SNS.ProjectInvite>(this, __projectinvite => __projectinvite._project);
			_bids = new IntermediateEntityCollection<projectNS.Project, projectNS.Bid, intermediateNS.Project, intermediateNS.Bid, L2SNS.Project, L2SNS.Bid>(this, __bid => __bid._project);
			_portfolioEntry = new IntermediateEntityReference<projectNS.Project, projectNS.PortfolioEntry, intermediateNS.Project, intermediateNS.PortfolioEntry, L2SNS.Project, L2SNS.PortfolioEntry>(this, __p => __p.PortfolioEntry, (__p, __portfolioentry) => __p.PortfolioEntry = __portfolioentry, __portfolioentry => __portfolioentry._project, true);
			_tenant = new IntermediateEntityReference<projectNS.Project, projectNS.Tenant, intermediateNS.Project, intermediateNS.Tenant, L2SNS.Project, L2SNS.Tenant>(this, __p => __p.Tenant, (__p, __tenant) => __p.Tenant = __tenant, __tenant => __tenant._projects, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Attachments":
					return Attachments.IsLoaded;
				case "Tags":
					return Tags.IsLoaded;
				case "Employer":
                	return _employer.IsLoaded;
				case "EmployerFeedback":
                	return _employerFeedback.IsLoaded;
				case "ProfileFeedback":
                	return _profileFeedback.IsLoaded;
				case "ProjectInvites":
					return ProjectInvites.IsLoaded;
				case "Bids":
					return Bids.IsLoaded;
				case "PortfolioEntry":
                	return _portfolioEntry.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class Project : ITableEntity<intermediateNS.Project>
	{
        public intermediateNS.Project _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Project;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class ProjectInviteMapping : ModelEntityMapping<projectNS.ProjectInvite, intermediateNS.ProjectInvite, L2SNS.ProjectInvite>
	{
		public ProjectInviteMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Company>(e => e.Company, e => e.ProjectInvites);
			AddRelationship<projectNS.Project>(e => e.Project, e => e.ProjectInvites);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.ProjectInvites);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(ProjectInviteMapping))]
	public partial class ProjectInvite : EntityBase, IModelEntity<intermediateNS.ProjectInvite>	
	{
		private intermediateNS.ProjectInvite __intermediateEntity;
		public intermediateNS.ProjectInvite _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.ProjectInvite intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long CompanyId 
		{	
			get { return _intermediateEntity.CompanyId; }
			set { _intermediateEntity.CompanyId = value; }
		}
		public virtual long ProjectId 
		{	
			get { return _intermediateEntity.ProjectId; }
			set { _intermediateEntity.ProjectId = value; }
		}
		public virtual string Status 
		{	
			get { return _intermediateEntity.Status; }
			set { _intermediateEntity.Status = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public Company Company 
		{	
			get { return _intermediateEntity.Company.GetEntity(); }
			set { if (value != null) _intermediateEntity.Company = value._intermediateEntity; else _intermediateEntity.Company = null; }
		}
		public Project Project 
		{	
			get { return _intermediateEntity.Project.GetEntity(); }
			set { if (value != null) _intermediateEntity.Project = value._intermediateEntity; else _intermediateEntity.Project = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public ProjectInvite() : this(new intermediateNS.ProjectInvite())
		{
		}
			
		public ProjectInvite(intermediateNS.ProjectInvite intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public ProjectInvite(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.ProjectInvite(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<ProjectInvite, pocoNS.ProjectInvite>(info);
		}

		public static bool operator ==(ProjectInvite a, ProjectInvite b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(ProjectInvite a, ProjectInvite b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((ProjectInvite)this)._equals(obj as ProjectInvite);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.ProjectInvite ToPOCO()
		{
			return this.CreatePOCO<ProjectInvite, pocoNS.ProjectInvite>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class ProjectInvite : IPOCO<projectNS.ProjectInvite>	{


		public long Id { get; set; }
		public long CompanyId { get; set; }
		public long ProjectId { get; set; }
		public string Status { get; set; }
		public long TenantId { get; set; }
		public POCOReference Company { get; set; }

		public POCOReference Project { get; set; }

		public POCOReference Tenant { get; set; }

			
		public ProjectInvite()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class ProjectInvite : IntermediateEntity<projectNS.ProjectInvite, L2SNS.ProjectInvite>
	{
		//Fields				
		public PrimaryKeyField<projectNS.ProjectInvite, intermediateNS.ProjectInvite, L2SNS.ProjectInvite, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.ProjectInvite, intermediateNS.ProjectInvite, L2SNS.ProjectInvite, long> _companyId;
		public long CompanyId 
		{	
			get { return _companyId.Value; }
			set { _companyId.Value = value; }
		}
		public EntityField<projectNS.ProjectInvite, intermediateNS.ProjectInvite, L2SNS.ProjectInvite, long> _projectId;
		public long ProjectId 
		{	
			get { return _projectId.Value; }
			set { _projectId.Value = value; }
		}
		public EntityField<projectNS.ProjectInvite, intermediateNS.ProjectInvite, L2SNS.ProjectInvite, string> _status;
		public string Status 
		{	
			get { return _status.Value; }
			set { _status.Value = value; }
		}
		public EntityField<projectNS.ProjectInvite, intermediateNS.ProjectInvite, L2SNS.ProjectInvite, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.ProjectInvite, projectNS.Company, intermediateNS.ProjectInvite, intermediateNS.Company, L2SNS.ProjectInvite, L2SNS.Company> _company;
		public intermediateNS.Company Company
		{	
			get { return _company.Value; }
			set { _company.Value = value; }
		}
		public IntermediateEntityReference<projectNS.ProjectInvite, projectNS.Project, intermediateNS.ProjectInvite, intermediateNS.Project, L2SNS.ProjectInvite, L2SNS.Project> _project;
		public intermediateNS.Project Project
		{	
			get { return _project.Value; }
			set { _project.Value = value; }
		}
		public IntermediateEntityReference<projectNS.ProjectInvite, projectNS.Tenant, intermediateNS.ProjectInvite, intermediateNS.Tenant, L2SNS.ProjectInvite, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public ProjectInvite()
		{
			__tableEntity = new L2SNS.ProjectInvite();
			initFields();
		}
		
		public ProjectInvite(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.ProjectInvite();
			initFields();
			
			this.Deserialize<projectNS.ProjectInvite, ProjectInvite, pocoNS.ProjectInvite>(info);
			
		}
			
		public ProjectInvite(L2SNS.ProjectInvite tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.ProjectInvite, intermediateNS.ProjectInvite, L2SNS.ProjectInvite, long>(this, t => t.Id, (t, val) => t.Id = val);
			_companyId = new EntityField<projectNS.ProjectInvite, intermediateNS.ProjectInvite, L2SNS.ProjectInvite, long>(this, t => t.CompanyId, (t, val) => t.CompanyId = val);
			_projectId = new EntityField<projectNS.ProjectInvite, intermediateNS.ProjectInvite, L2SNS.ProjectInvite, long>(this, t => t.ProjectId, (t, val) => t.ProjectId = val);
			_status = new EntityField<projectNS.ProjectInvite, intermediateNS.ProjectInvite, L2SNS.ProjectInvite, string>(this, t => t.Status, (t, val) => t.Status = val);
			_tenantId = new EntityField<projectNS.ProjectInvite, intermediateNS.ProjectInvite, L2SNS.ProjectInvite, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_company = new IntermediateEntityReference<projectNS.ProjectInvite, projectNS.Company, intermediateNS.ProjectInvite, intermediateNS.Company, L2SNS.ProjectInvite, L2SNS.Company>(this, __p => __p.Company, (__p, __company) => __p.Company = __company, __company => __company._projectInvites, false);
			_project = new IntermediateEntityReference<projectNS.ProjectInvite, projectNS.Project, intermediateNS.ProjectInvite, intermediateNS.Project, L2SNS.ProjectInvite, L2SNS.Project>(this, __p => __p.Project, (__p, __project) => __p.Project = __project, __project => __project._projectInvites, false);
			_tenant = new IntermediateEntityReference<projectNS.ProjectInvite, projectNS.Tenant, intermediateNS.ProjectInvite, intermediateNS.Tenant, L2SNS.ProjectInvite, L2SNS.Tenant>(this, __p => __p.Tenant, (__p, __tenant) => __p.Tenant = __tenant, __tenant => __tenant._projectInvites, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Company":
                	return _company.IsLoaded;
				case "Project":
                	return _project.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class ProjectInvite : ITableEntity<intermediateNS.ProjectInvite>
	{
        public intermediateNS.ProjectInvite _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.ProjectInvite;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class TagMapping : ModelEntityMapping<projectNS.Tag, intermediateNS.Tag, L2SNS.Tag>
	{
		public TagMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddManyToManyRelationship<projectNS.Project, ProjectTagMap>(e => e.Projects, map => map.Project, map => map.Tag);
			AddManyToManyRelationship<projectNS.Company, TagCompanyMap>(e => e.Companies, map => map.Company, map => map.Tag);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Tags);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(TagMapping))]
	public partial class Tag : EntityBase, IModelEntity<intermediateNS.Tag>	
	{
		private intermediateNS.Tag __intermediateEntity;
		public intermediateNS.Tag _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Tag intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual string Name 
		{	
			get { return _intermediateEntity.Name; }
			set { _intermediateEntity.Name = value; }
		}
		public virtual string Slug 
		{	
			get { return _intermediateEntity.Slug; }
			set { _intermediateEntity.Slug = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.Project> Projects 
		{	
			get { return _intermediateEntity.Projects.EntityCollection; }
		}		
		public ICollection<projectNS.Company> Companies 
		{	
			get { return _intermediateEntity.Companies.EntityCollection; }
		}		
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Tag() : this(new intermediateNS.Tag())
		{
		}
			
		public Tag(intermediateNS.Tag intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Tag(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Tag(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Tag, pocoNS.Tag>(info);
		}

		public static bool operator ==(Tag a, Tag b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Tag a, Tag b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Tag)this)._equals(obj as Tag);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Tag ToPOCO()
		{
			return this.CreatePOCO<Tag, pocoNS.Tag>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class Tag : IPOCO<projectNS.Tag>	{


		public long Id { get; set; }
		public string Name { get; set; }
		public string Slug { get; set; }
		public long TenantId { get; set; }
		public POCOCollection Projects { get; set; }

		public POCOCollection Companies { get; set; }

		public POCOReference Tenant { get; set; }

			
		public Tag()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class Tag : IntermediateEntity<projectNS.Tag, L2SNS.Tag>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Tag, intermediateNS.Tag, L2SNS.Tag, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Tag, intermediateNS.Tag, L2SNS.Tag, string> _name;
		public string Name 
		{	
			get { return _name.Value; }
			set { _name.Value = value; }
		}
		public EntityField<projectNS.Tag, intermediateNS.Tag, L2SNS.Tag, string> _slug;
		public string Slug 
		{	
			get { return _slug.Value; }
			set { _slug.Value = value; }
		}
		public EntityField<projectNS.Tag, intermediateNS.Tag, L2SNS.Tag, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateManyToManyCollection<projectNS.Tag, projectNS.Project, projectNS.ProjectTagMap, intermediateNS.Tag, intermediateNS.Project, intermediateNS.ProjectTagMap, L2SNS.Tag, L2SNS.Project, L2SNS.ProjectTagMap> _projects;
		public IntermediateManyToManyCollection<projectNS.Tag, projectNS.Project, projectNS.ProjectTagMap, intermediateNS.Tag, intermediateNS.Project, intermediateNS.ProjectTagMap, L2SNS.Tag, L2SNS.Project, L2SNS.ProjectTagMap> Projects 
		{	
			get { return _projects; }		
		}
		public IntermediateManyToManyCollection<projectNS.Tag, projectNS.Company, projectNS.TagCompanyMap, intermediateNS.Tag, intermediateNS.Company, intermediateNS.TagCompanyMap, L2SNS.Tag, L2SNS.Company, L2SNS.TagCompanyMap> _companies;
		public IntermediateManyToManyCollection<projectNS.Tag, projectNS.Company, projectNS.TagCompanyMap, intermediateNS.Tag, intermediateNS.Company, intermediateNS.TagCompanyMap, L2SNS.Tag, L2SNS.Company, L2SNS.TagCompanyMap> Companies 
		{	
			get { return _companies; }		
		}
		public IntermediateEntityReference<projectNS.Tag, projectNS.Tenant, intermediateNS.Tag, intermediateNS.Tenant, L2SNS.Tag, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Tag()
		{
			__tableEntity = new L2SNS.Tag();
			initFields();
		}
		
		public Tag(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Tag();
			initFields();
			
			this.Deserialize<projectNS.Tag, Tag, pocoNS.Tag>(info);
			
		}
			
		public Tag(L2SNS.Tag tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Tag, intermediateNS.Tag, L2SNS.Tag, long>(this, t => t.Id, (t, val) => t.Id = val);
			_name = new EntityField<projectNS.Tag, intermediateNS.Tag, L2SNS.Tag, string>(this, t => t.Name, (t, val) => t.Name = val);
			_slug = new EntityField<projectNS.Tag, intermediateNS.Tag, L2SNS.Tag, string>(this, t => t.Slug, (t, val) => t.Slug = val);
			_tenantId = new EntityField<projectNS.Tag, intermediateNS.Tag, L2SNS.Tag, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_projects = new IntermediateManyToManyCollection<projectNS.Tag, projectNS.Project, projectNS.ProjectTagMap, intermediateNS.Tag, intermediateNS.Project, intermediateNS.ProjectTagMap, L2SNS.Tag, L2SNS.Project, L2SNS.ProjectTagMap>(this, __map => __map.Project, __map => __map.Tag, (__map, __t) => __map.Project = __t, (__map, __project) => __map.Tag = __project, __project => __project._tags);
			_companies = new IntermediateManyToManyCollection<projectNS.Tag, projectNS.Company, projectNS.TagCompanyMap, intermediateNS.Tag, intermediateNS.Company, intermediateNS.TagCompanyMap, L2SNS.Tag, L2SNS.Company, L2SNS.TagCompanyMap>(this, __map => __map.Company, __map => __map.Tag, (__map, __t) => __map.Company = __t, (__map, __company) => __map.Tag = __company, __company => __company._tags);
			_tenant = new IntermediateEntityReference<projectNS.Tag, projectNS.Tenant, intermediateNS.Tag, intermediateNS.Tenant, L2SNS.Tag, L2SNS.Tenant>(this, __t => __t.Tenant, (__t, __tenant) => __t.Tenant = __tenant, __tenant => __tenant._tags, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Projects":
					return Projects.IsLoaded;
				case "Companies":
					return Companies.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class Tag : ITableEntity<intermediateNS.Tag>
	{
        public intermediateNS.Tag _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Tag;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class TokenMapping : ModelEntityMapping<projectNS.Token, intermediateNS.Token, L2SNS.Token>
	{
		public TokenMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Tokens);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(TokenMapping))]
	public partial class Token : IModelEntity<intermediateNS.Token>	
	{
		private intermediateNS.Token __intermediateEntity;
		public intermediateNS.Token _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Token intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual DateTime CreatedDate 
		{	
			get { return _intermediateEntity.CreatedDate; }
			set { _intermediateEntity.CreatedDate = value; }
		}
		public virtual string Data 
		{	
			get { return _intermediateEntity.Data; }
			set { _intermediateEntity.Data = value; }
		}
		public virtual string Key 
		{	
			get { return _intermediateEntity.Key; }
			set { _intermediateEntity.Key = value; }
		}
		public virtual string Type 
		{	
			get { return _intermediateEntity.Type; }
			set { _intermediateEntity.Type = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Token() : this(new intermediateNS.Token())
		{
		}
			
		public Token(intermediateNS.Token intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Token(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Token(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Token, pocoNS.Token>(info);
		}

		public static bool operator ==(Token a, Token b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Token a, Token b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Token)this)._equals(obj as Token);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Token ToPOCO()
		{
			return this.CreatePOCO<Token, pocoNS.Token>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class Token : IPOCO<projectNS.Token>	{


		public long Id { get; set; }
		public DateTime CreatedDate { get; set; }
		public string Data { get; set; }
		public string Key { get; set; }
		public string Type { get; set; }
		public long TenantId { get; set; }
		public POCOReference Tenant { get; set; }

			
		public Token()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class Token : IntermediateEntity<projectNS.Token, L2SNS.Token>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Token, intermediateNS.Token, L2SNS.Token, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Token, intermediateNS.Token, L2SNS.Token, DateTime> _createdDate;
		public DateTime CreatedDate 
		{	
			get { return _createdDate.Value; }
			set { _createdDate.Value = value; }
		}
		public EntityField<projectNS.Token, intermediateNS.Token, L2SNS.Token, string> _data;
		public string Data 
		{	
			get { return _data.Value; }
			set { _data.Value = value; }
		}
		public EntityField<projectNS.Token, intermediateNS.Token, L2SNS.Token, string> _key;
		public string Key 
		{	
			get { return _key.Value; }
			set { _key.Value = value; }
		}
		public EntityField<projectNS.Token, intermediateNS.Token, L2SNS.Token, string> _type;
		public string Type 
		{	
			get { return _type.Value; }
			set { _type.Value = value; }
		}
		public EntityField<projectNS.Token, intermediateNS.Token, L2SNS.Token, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.Token, projectNS.Tenant, intermediateNS.Token, intermediateNS.Tenant, L2SNS.Token, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Token()
		{
			__tableEntity = new L2SNS.Token();
			initFields();
		}
		
		public Token(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Token();
			initFields();
			
			this.Deserialize<projectNS.Token, Token, pocoNS.Token>(info);
			
		}
			
		public Token(L2SNS.Token tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Token, intermediateNS.Token, L2SNS.Token, long>(this, t => t.Id, (t, val) => t.Id = val);
			_createdDate = new EntityField<projectNS.Token, intermediateNS.Token, L2SNS.Token, DateTime>(this, t => t.CreatedDate, (t, val) => t.CreatedDate = val);
			_data = new EntityField<projectNS.Token, intermediateNS.Token, L2SNS.Token, string>(this, t => t.Data, (t, val) => t.Data = val);
			_key = new EntityField<projectNS.Token, intermediateNS.Token, L2SNS.Token, string>(this, t => t.Key, (t, val) => t.Key = val);
			_type = new EntityField<projectNS.Token, intermediateNS.Token, L2SNS.Token, string>(this, t => t.Type, (t, val) => t.Type = val);
			_tenantId = new EntityField<projectNS.Token, intermediateNS.Token, L2SNS.Token, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_tenant = new IntermediateEntityReference<projectNS.Token, projectNS.Tenant, intermediateNS.Token, intermediateNS.Tenant, L2SNS.Token, L2SNS.Tenant>(this, __t => __t.Tenant, (__t, __tenant) => __t.Tenant = __tenant, __tenant => __tenant._tokens, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class Token : ITableEntity<intermediateNS.Token>
	{
        public intermediateNS.Token _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Token;
		}
	}
}

namespace canyoucode.Core.Models
{
	public class TenantMapping : ModelEntityMapping<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant>
	{
		public TenantMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Account>(e => e.Accounts, e => e.Tenant);
			AddRelationship<projectNS.AccountAlert>(e => e.AccountAlerts, e => e.Tenant);
			AddRelationship<projectNS.Attachment>(e => e.Attachments, e => e.Tenant);
			AddRelationship<projectNS.Bid>(e => e.Bids, e => e.Tenant);
			AddRelationship<projectNS.Company>(e => e.Companies, e => e.Tenant);
			AddRelationship<projectNS.Consultant>(e => e.Consultants, e => e.Tenant);
			AddRelationship<projectNS.Credential>(e => e.Credentials, e => e.Tenant);
			AddRelationship<projectNS.Employer>(e => e.Employers, e => e.Tenant);
			AddRelationship<projectNS.EmployerFeedback>(e => e.EmployerFeedbacks, e => e.Tenant);
			AddRelationship<projectNS.PortfolioEntry>(e => e.PortfolioEntries, e => e.Tenant);
			AddRelationship<projectNS.Project>(e => e.Projects, e => e.Tenant);
			AddRelationship<projectNS.ProjectInvite>(e => e.ProjectInvites, e => e.Tenant);
			AddRelationship<projectNS.Tag>(e => e.Tags, e => e.Tenant);
			AddRelationship<projectNS.Token>(e => e.Tokens, e => e.Tenant);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(TenantMapping))]
	public partial class Tenant : IModelEntity<intermediateNS.Tenant>	
	{
		private intermediateNS.Tenant __intermediateEntity;
		public intermediateNS.Tenant _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Tenant intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual string Name 
		{	
			get { return _intermediateEntity.Name; }
			set { _intermediateEntity.Name = value; }
		}
		public virtual string DomainName 
		{	
			get { return _intermediateEntity.DomainName; }
			set { _intermediateEntity.DomainName = value; }
		}
		public virtual string ViewStore 
		{	
			get { return _intermediateEntity.ViewStore; }
			set { _intermediateEntity.ViewStore = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.Account> Accounts 
		{	
			get { return _intermediateEntity.Accounts.EntityCollection; }
		}		
		public ICollection<projectNS.AccountAlert> AccountAlerts 
		{	
			get { return _intermediateEntity.AccountAlerts.EntityCollection; }
		}		
		public ICollection<projectNS.Attachment> Attachments 
		{	
			get { return _intermediateEntity.Attachments.EntityCollection; }
		}		
		public ICollection<projectNS.Bid> Bids 
		{	
			get { return _intermediateEntity.Bids.EntityCollection; }
		}		
		public ICollection<projectNS.Company> Companies 
		{	
			get { return _intermediateEntity.Companies.EntityCollection; }
		}		
		public ICollection<projectNS.Consultant> Consultants 
		{	
			get { return _intermediateEntity.Consultants.EntityCollection; }
		}		
		public ICollection<projectNS.Credential> Credentials 
		{	
			get { return _intermediateEntity.Credentials.EntityCollection; }
		}		
		public ICollection<projectNS.Employer> Employers 
		{	
			get { return _intermediateEntity.Employers.EntityCollection; }
		}		
		public ICollection<projectNS.EmployerFeedback> EmployerFeedbacks 
		{	
			get { return _intermediateEntity.EmployerFeedbacks.EntityCollection; }
		}		
		public ICollection<projectNS.PortfolioEntry> PortfolioEntries 
		{	
			get { return _intermediateEntity.PortfolioEntries.EntityCollection; }
		}		
		public ICollection<projectNS.Project> Projects 
		{	
			get { return _intermediateEntity.Projects.EntityCollection; }
		}		
		public ICollection<projectNS.ProjectInvite> ProjectInvites 
		{	
			get { return _intermediateEntity.ProjectInvites.EntityCollection; }
		}		
		public ICollection<projectNS.Tag> Tags 
		{	
			get { return _intermediateEntity.Tags.EntityCollection; }
		}		
		public ICollection<projectNS.Token> Tokens 
		{	
			get { return _intermediateEntity.Tokens.EntityCollection; }
		}		
		public Tenant() : this(new intermediateNS.Tenant())
		{
		}
			
		public Tenant(intermediateNS.Tenant intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Tenant(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Tenant(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Tenant, pocoNS.Tenant>(info);
		}

		public static bool operator ==(Tenant a, Tenant b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Tenant a, Tenant b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Tenant)this)._equals(obj as Tenant);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Tenant ToPOCO()
		{
			return this.CreatePOCO<Tenant, pocoNS.Tenant>();
		}
	}
}

namespace canyoucode.Core.Models.POCO
{
	[Serializable]
	public class Tenant : IPOCO<projectNS.Tenant>	{


		public long Id { get; set; }
		public string Name { get; set; }
		public string DomainName { get; set; }
		public string ViewStore { get; set; }
		public POCOCollection Accounts { get; set; }

		public POCOCollection AccountAlerts { get; set; }

		public POCOCollection Attachments { get; set; }

		public POCOCollection Bids { get; set; }

		public POCOCollection Companies { get; set; }

		public POCOCollection Consultants { get; set; }

		public POCOCollection Credentials { get; set; }

		public POCOCollection Employers { get; set; }

		public POCOCollection EmployerFeedbacks { get; set; }

		public POCOCollection PortfolioEntries { get; set; }

		public POCOCollection Projects { get; set; }

		public POCOCollection ProjectInvites { get; set; }

		public POCOCollection Tags { get; set; }

		public POCOCollection Tokens { get; set; }

			
		public Tenant()
		{
		}
	}
}
	
namespace canyoucode.Core.Models.Intermediate
{
	public class Tenant : IntermediateEntity<projectNS.Tenant, L2SNS.Tenant>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string> _name;
		public string Name 
		{	
			get { return _name.Value; }
			set { _name.Value = value; }
		}
		public EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string> _domainName;
		public string DomainName 
		{	
			get { return _domainName.Value; }
			set { _domainName.Value = value; }
		}
		public EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string> _viewStore;
		public string ViewStore 
		{	
			get { return _viewStore.Value; }
			set { _viewStore.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Account, intermediateNS.Tenant, intermediateNS.Account, L2SNS.Tenant, L2SNS.Account> _accounts;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Account, intermediateNS.Tenant, intermediateNS.Account, L2SNS.Tenant, L2SNS.Account> Accounts 
		{	
			get { return _accounts; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.AccountAlert, intermediateNS.Tenant, intermediateNS.AccountAlert, L2SNS.Tenant, L2SNS.AccountAlert> _accountAlerts;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.AccountAlert, intermediateNS.Tenant, intermediateNS.AccountAlert, L2SNS.Tenant, L2SNS.AccountAlert> AccountAlerts 
		{	
			get { return _accountAlerts; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Attachment, intermediateNS.Tenant, intermediateNS.Attachment, L2SNS.Tenant, L2SNS.Attachment> _attachments;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Attachment, intermediateNS.Tenant, intermediateNS.Attachment, L2SNS.Tenant, L2SNS.Attachment> Attachments 
		{	
			get { return _attachments; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Bid, intermediateNS.Tenant, intermediateNS.Bid, L2SNS.Tenant, L2SNS.Bid> _bids;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Bid, intermediateNS.Tenant, intermediateNS.Bid, L2SNS.Tenant, L2SNS.Bid> Bids 
		{	
			get { return _bids; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Company, intermediateNS.Tenant, intermediateNS.Company, L2SNS.Tenant, L2SNS.Company> _companies;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Company, intermediateNS.Tenant, intermediateNS.Company, L2SNS.Tenant, L2SNS.Company> Companies 
		{	
			get { return _companies; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Consultant, intermediateNS.Tenant, intermediateNS.Consultant, L2SNS.Tenant, L2SNS.Consultant> _consultants;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Consultant, intermediateNS.Tenant, intermediateNS.Consultant, L2SNS.Tenant, L2SNS.Consultant> Consultants 
		{	
			get { return _consultants; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Credential, intermediateNS.Tenant, intermediateNS.Credential, L2SNS.Tenant, L2SNS.Credential> _credentials;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Credential, intermediateNS.Tenant, intermediateNS.Credential, L2SNS.Tenant, L2SNS.Credential> Credentials 
		{	
			get { return _credentials; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Employer, intermediateNS.Tenant, intermediateNS.Employer, L2SNS.Tenant, L2SNS.Employer> _employers;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Employer, intermediateNS.Tenant, intermediateNS.Employer, L2SNS.Tenant, L2SNS.Employer> Employers 
		{	
			get { return _employers; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.EmployerFeedback, intermediateNS.Tenant, intermediateNS.EmployerFeedback, L2SNS.Tenant, L2SNS.EmployerFeedback> _employerFeedbacks;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.EmployerFeedback, intermediateNS.Tenant, intermediateNS.EmployerFeedback, L2SNS.Tenant, L2SNS.EmployerFeedback> EmployerFeedbacks 
		{	
			get { return _employerFeedbacks; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.PortfolioEntry, intermediateNS.Tenant, intermediateNS.PortfolioEntry, L2SNS.Tenant, L2SNS.PortfolioEntry> _portfolioEntries;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.PortfolioEntry, intermediateNS.Tenant, intermediateNS.PortfolioEntry, L2SNS.Tenant, L2SNS.PortfolioEntry> PortfolioEntries 
		{	
			get { return _portfolioEntries; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Project, intermediateNS.Tenant, intermediateNS.Project, L2SNS.Tenant, L2SNS.Project> _projects;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Project, intermediateNS.Tenant, intermediateNS.Project, L2SNS.Tenant, L2SNS.Project> Projects 
		{	
			get { return _projects; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.ProjectInvite, intermediateNS.Tenant, intermediateNS.ProjectInvite, L2SNS.Tenant, L2SNS.ProjectInvite> _projectInvites;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.ProjectInvite, intermediateNS.Tenant, intermediateNS.ProjectInvite, L2SNS.Tenant, L2SNS.ProjectInvite> ProjectInvites 
		{	
			get { return _projectInvites; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Tag, intermediateNS.Tenant, intermediateNS.Tag, L2SNS.Tenant, L2SNS.Tag> _tags;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Tag, intermediateNS.Tenant, intermediateNS.Tag, L2SNS.Tenant, L2SNS.Tag> Tags 
		{	
			get { return _tags; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Token, intermediateNS.Tenant, intermediateNS.Token, L2SNS.Tenant, L2SNS.Token> _tokens;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Token, intermediateNS.Tenant, intermediateNS.Token, L2SNS.Tenant, L2SNS.Token> Tokens 
		{	
			get { return _tokens; }		
		}				
		
		//Inherited Navigation Properties
						
		public Tenant()
		{
			__tableEntity = new L2SNS.Tenant();
			initFields();
		}
		
		public Tenant(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Tenant();
			initFields();
			
			this.Deserialize<projectNS.Tenant, Tenant, pocoNS.Tenant>(info);
			
		}
			
		public Tenant(L2SNS.Tenant tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, long>(this, t => t.Id, (t, val) => t.Id = val);
			_name = new EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string>(this, t => t.Name, (t, val) => t.Name = val);
			_domainName = new EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string>(this, t => t.DomainName, (t, val) => t.DomainName = val);
			_viewStore = new EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string>(this, t => t.ViewStore, (t, val) => t.ViewStore = val);
			_accounts = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Account, intermediateNS.Tenant, intermediateNS.Account, L2SNS.Tenant, L2SNS.Account>(this, __account => __account._tenant);
			_accountAlerts = new IntermediateEntityCollection<projectNS.Tenant, projectNS.AccountAlert, intermediateNS.Tenant, intermediateNS.AccountAlert, L2SNS.Tenant, L2SNS.AccountAlert>(this, __accountalert => __accountalert._tenant);
			_attachments = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Attachment, intermediateNS.Tenant, intermediateNS.Attachment, L2SNS.Tenant, L2SNS.Attachment>(this, __attachment => __attachment._tenant);
			_bids = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Bid, intermediateNS.Tenant, intermediateNS.Bid, L2SNS.Tenant, L2SNS.Bid>(this, __bid => __bid._tenant);
			_companies = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Company, intermediateNS.Tenant, intermediateNS.Company, L2SNS.Tenant, L2SNS.Company>(this, __company => __company._tenant);
			_consultants = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Consultant, intermediateNS.Tenant, intermediateNS.Consultant, L2SNS.Tenant, L2SNS.Consultant>(this, __consultant => __consultant._tenant);
			_credentials = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Credential, intermediateNS.Tenant, intermediateNS.Credential, L2SNS.Tenant, L2SNS.Credential>(this, __credential => __credential._tenant);
			_employers = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Employer, intermediateNS.Tenant, intermediateNS.Employer, L2SNS.Tenant, L2SNS.Employer>(this, __employer => __employer._tenant);
			_employerFeedbacks = new IntermediateEntityCollection<projectNS.Tenant, projectNS.EmployerFeedback, intermediateNS.Tenant, intermediateNS.EmployerFeedback, L2SNS.Tenant, L2SNS.EmployerFeedback>(this, __employerfeedback => __employerfeedback._tenant);
			_portfolioEntries = new IntermediateEntityCollection<projectNS.Tenant, projectNS.PortfolioEntry, intermediateNS.Tenant, intermediateNS.PortfolioEntry, L2SNS.Tenant, L2SNS.PortfolioEntry>(this, __portfolioentry => __portfolioentry._tenant);
			_projects = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Project, intermediateNS.Tenant, intermediateNS.Project, L2SNS.Tenant, L2SNS.Project>(this, __project => __project._tenant);
			_projectInvites = new IntermediateEntityCollection<projectNS.Tenant, projectNS.ProjectInvite, intermediateNS.Tenant, intermediateNS.ProjectInvite, L2SNS.Tenant, L2SNS.ProjectInvite>(this, __projectinvite => __projectinvite._tenant);
			_tags = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Tag, intermediateNS.Tenant, intermediateNS.Tag, L2SNS.Tenant, L2SNS.Tag>(this, __tag => __tag._tenant);
			_tokens = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Token, intermediateNS.Tenant, intermediateNS.Token, L2SNS.Tenant, L2SNS.Token>(this, __token => __token._tenant);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Accounts":
					return Accounts.IsLoaded;
				case "AccountAlerts":
					return AccountAlerts.IsLoaded;
				case "Attachments":
					return Attachments.IsLoaded;
				case "Bids":
					return Bids.IsLoaded;
				case "Companies":
					return Companies.IsLoaded;
				case "Consultants":
					return Consultants.IsLoaded;
				case "Credentials":
					return Credentials.IsLoaded;
				case "Employers":
					return Employers.IsLoaded;
				case "EmployerFeedbacks":
					return EmployerFeedbacks.IsLoaded;
				case "PortfolioEntries":
					return PortfolioEntries.IsLoaded;
				case "Projects":
					return Projects.IsLoaded;
				case "ProjectInvites":
					return ProjectInvites.IsLoaded;
				case "Tags":
					return Tags.IsLoaded;
				case "Tokens":
					return Tokens.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.Models.L2S
{
	partial class Tenant : ITableEntity<intermediateNS.Tenant>
	{
        public intermediateNS.Tenant _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Tenant;
		}
	}
}

namespace canyoucode.Core.Models
{
    public class ProjectAttachmentMapMapping : MapEntityMapping<projectNS.ProjectAttachmentMap, intermediateNS.ProjectAttachmentMap, L2SNS.ProjectAttachmentMap>
    {
       public ProjectAttachmentMapMapping()
       {
	   		AddMappings();
       }
	   
	   public virtual void AddMappings()
	   {
		   AddIdentityField<long>(__a => __a.AttachmentId, false);
		   AddIdentityField<long>(__a => __a.ProjectId, false);
	   	   
		   AddManyToManyKeyRelationship<long, Project, long>(__a => __a.AttachmentId, __a => __a.Id);
		   AddManyToManyKeyRelationship<long, Attachment, long>(__a => __a.ProjectId, __a => __a.Id);
	   	   
		   AddManyToManyMap<Project, L2SNS.Project>(__a => __a.Attachment, __a => __a.ProjectAttachmentMap);
           AddManyToManyMap<Attachment, L2SNS.Attachment>(__a => __a.Project, __a => __a.ProjectAttachmentMap);	   
	   }
   	}
	
	[ClassMapping(typeof(ProjectAttachmentMapMapping))]
	public partial class ProjectAttachmentMap : IEntity<intermediateNS.ProjectAttachmentMap>
	{
		private intermediateNS.ProjectAttachmentMap __intermediateEntity;
		public intermediateNS.ProjectAttachmentMap _intermediateEntity { get { return __intermediateEntity; } }		
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}		
		public void _setIntermediateEntity(intermediateNS.ProjectAttachmentMap intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public virtual long AttachmentId
		{
			get { return __intermediateEntity.AttachmentId; }
			set { __intermediateEntity.AttachmentId = value; }
		}
		
		public virtual long ProjectId
		{
			get { return __intermediateEntity.ProjectId; }
			set { __intermediateEntity.ProjectId = value; }
		}
		
		public projectNS.Project Attachment
		{	
			get { return _intermediateEntity.Attachment.GetEntity(); }
			set { if (value != null) _intermediateEntity.Attachment = value._intermediateEntity; else _intermediateEntity.Attachment = null; }
		}
		
		public projectNS.Attachment Project
		{	
			get { return _intermediateEntity.Project.GetEntity(); }
			set { if (value != null) _intermediateEntity.Project = value._intermediateEntity; else _intermediateEntity.Project = null; }
		}
						
		public ProjectAttachmentMap()
		{
			__intermediateEntity = new intermediateNS.ProjectAttachmentMap();
			__intermediateEntity._entity = this;
		}
			
		public ProjectAttachmentMap(intermediateNS.ProjectAttachmentMap intermediateEntity)
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
	}
}

namespace canyoucode.Core.Models.Intermediate
{
	public class ProjectAttachmentMap : IntermediateEntity<projectNS.ProjectAttachmentMap, L2SNS.ProjectAttachmentMap>
	{
		private bool _loadedFromDatabase = false;
		
		public PrimaryKeyField<projectNS.ProjectAttachmentMap, intermediateNS.ProjectAttachmentMap, L2SNS.ProjectAttachmentMap, long> _attachmentId;
		public long AttachmentId
		{
			get { return _attachmentId.Value; }
			set { _attachmentId.Value = value; }
		}
		
		public PrimaryKeyField<projectNS.ProjectAttachmentMap, intermediateNS.ProjectAttachmentMap, L2SNS.ProjectAttachmentMap, long> _projectId;
		public long ProjectId
		{
			get { return _projectId.Value; }
			set { _projectId.Value = value; }
		}
	
		private intermediateNS.Project _attachment;
		public intermediateNS.Project Attachment
		{	
			get { return _attachment; }
			set { _attachment = value; if (!_loadedFromDatabase) { __tableEntity.Attachment = value._tableEntity; } }
		}
		
		private intermediateNS.Attachment _project;
		public intermediateNS.Attachment Project
		{	
			get { return _project; }
			set { _project = value; if (!_loadedFromDatabase) { __tableEntity.Project = value._tableEntity; } }
		}
						
		public ProjectAttachmentMap()
		{
			__tableEntity = new L2SNS.ProjectAttachmentMap();
			initFields();
		}
			
		public ProjectAttachmentMap(L2SNS.ProjectAttachmentMap tableEntity)
		{
			_loadedFromDatabase = true;
			__tableEntity = tableEntity;
			initFields();
		}
		
		private void initFields()
		{
			_attachmentId = new PrimaryKeyField<projectNS.ProjectAttachmentMap, intermediateNS.ProjectAttachmentMap, L2SNS.ProjectAttachmentMap, long>(this, __m => __m.AttachmentId, (__m, val) => __m.AttachmentId = val);
			_projectId = new PrimaryKeyField<projectNS.ProjectAttachmentMap, intermediateNS.ProjectAttachmentMap, L2SNS.ProjectAttachmentMap, long>(this, __m => __m.ProjectId, (__m, val) => __m.ProjectId = val);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
			return true;
		}
	}
}

namespace canyoucode.Core.Models.L2S
{
	partial class ProjectAttachmentMap : ITableEntity<intermediateNS.ProjectAttachmentMap>
	{
        public intermediateNS.ProjectAttachmentMap _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}
		
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.ProjectAttachmentMap;
		}
	}
}
namespace canyoucode.Core.Models
{
    public class TagCompanyMapMapping : MapEntityMapping<projectNS.TagCompanyMap, intermediateNS.TagCompanyMap, L2SNS.TagCompanyMap>
    {
       public TagCompanyMapMapping()
       {
	   		AddMappings();
       }
	   
	   public virtual void AddMappings()
	   {
		   AddIdentityField<long>(__a => __a.CompanyId, false);
		   AddIdentityField<long>(__a => __a.TagId, false);
	   	   
		   AddManyToManyKeyRelationship<long, Tag, long>(__a => __a.CompanyId, __a => __a.Id);
		   AddManyToManyKeyRelationship<long, Company, long>(__a => __a.TagId, __a => __a.Id);
	   	   
		   AddManyToManyMap<Tag, L2SNS.Tag>(__a => __a.Company, __a => __a.TagCompanyMap);
           AddManyToManyMap<Company, L2SNS.Company>(__a => __a.Tag, __a => __a.TagCompanyMap);	   
	   }
   	}
	
	[ClassMapping(typeof(TagCompanyMapMapping))]
	public partial class TagCompanyMap : IEntity<intermediateNS.TagCompanyMap>
	{
		private intermediateNS.TagCompanyMap __intermediateEntity;
		public intermediateNS.TagCompanyMap _intermediateEntity { get { return __intermediateEntity; } }		
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}		
		public void _setIntermediateEntity(intermediateNS.TagCompanyMap intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public virtual long CompanyId
		{
			get { return __intermediateEntity.CompanyId; }
			set { __intermediateEntity.CompanyId = value; }
		}
		
		public virtual long TagId
		{
			get { return __intermediateEntity.TagId; }
			set { __intermediateEntity.TagId = value; }
		}
		
		public projectNS.Tag Company
		{	
			get { return _intermediateEntity.Company.GetEntity(); }
			set { if (value != null) _intermediateEntity.Company = value._intermediateEntity; else _intermediateEntity.Company = null; }
		}
		
		public projectNS.Company Tag
		{	
			get { return _intermediateEntity.Tag.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tag = value._intermediateEntity; else _intermediateEntity.Tag = null; }
		}
						
		public TagCompanyMap()
		{
			__intermediateEntity = new intermediateNS.TagCompanyMap();
			__intermediateEntity._entity = this;
		}
			
		public TagCompanyMap(intermediateNS.TagCompanyMap intermediateEntity)
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
	}
}

namespace canyoucode.Core.Models.Intermediate
{
	public class TagCompanyMap : IntermediateEntity<projectNS.TagCompanyMap, L2SNS.TagCompanyMap>
	{
		private bool _loadedFromDatabase = false;
		
		public PrimaryKeyField<projectNS.TagCompanyMap, intermediateNS.TagCompanyMap, L2SNS.TagCompanyMap, long> _companyId;
		public long CompanyId
		{
			get { return _companyId.Value; }
			set { _companyId.Value = value; }
		}
		
		public PrimaryKeyField<projectNS.TagCompanyMap, intermediateNS.TagCompanyMap, L2SNS.TagCompanyMap, long> _tagId;
		public long TagId
		{
			get { return _tagId.Value; }
			set { _tagId.Value = value; }
		}
	
		private intermediateNS.Tag _company;
		public intermediateNS.Tag Company
		{	
			get { return _company; }
			set { _company = value; if (!_loadedFromDatabase) { __tableEntity.Company = value._tableEntity; } }
		}
		
		private intermediateNS.Company _tag;
		public intermediateNS.Company Tag
		{	
			get { return _tag; }
			set { _tag = value; if (!_loadedFromDatabase) { __tableEntity.Tag = value._tableEntity; } }
		}
						
		public TagCompanyMap()
		{
			__tableEntity = new L2SNS.TagCompanyMap();
			initFields();
		}
			
		public TagCompanyMap(L2SNS.TagCompanyMap tableEntity)
		{
			_loadedFromDatabase = true;
			__tableEntity = tableEntity;
			initFields();
		}
		
		private void initFields()
		{
			_companyId = new PrimaryKeyField<projectNS.TagCompanyMap, intermediateNS.TagCompanyMap, L2SNS.TagCompanyMap, long>(this, __m => __m.CompanyId, (__m, val) => __m.CompanyId = val);
			_tagId = new PrimaryKeyField<projectNS.TagCompanyMap, intermediateNS.TagCompanyMap, L2SNS.TagCompanyMap, long>(this, __m => __m.TagId, (__m, val) => __m.TagId = val);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
			return true;
		}
	}
}

namespace canyoucode.Core.Models.L2S
{
	partial class TagCompanyMap : ITableEntity<intermediateNS.TagCompanyMap>
	{
        public intermediateNS.TagCompanyMap _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}
		
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.TagCompanyMap;
		}
	}
}
namespace canyoucode.Core.Models
{
    public class ProjectTagMapMapping : MapEntityMapping<projectNS.ProjectTagMap, intermediateNS.ProjectTagMap, L2SNS.ProjectTagMap>
    {
       public ProjectTagMapMapping()
       {
	   		AddMappings();
       }
	   
	   public virtual void AddMappings()
	   {
		   AddIdentityField<long>(__a => __a.ProjectId, false);
		   AddIdentityField<long>(__a => __a.TagId, false);
	   	   
		   AddManyToManyKeyRelationship<long, Tag, long>(__a => __a.ProjectId, __a => __a.Id);
		   AddManyToManyKeyRelationship<long, Project, long>(__a => __a.TagId, __a => __a.Id);
	   	   
		   AddManyToManyMap<Tag, L2SNS.Tag>(__a => __a.Project, __a => __a.ProjectTagMap);
           AddManyToManyMap<Project, L2SNS.Project>(__a => __a.Tag, __a => __a.ProjectTagMap);	   
	   }
   	}
	
	[ClassMapping(typeof(ProjectTagMapMapping))]
	public partial class ProjectTagMap : IEntity<intermediateNS.ProjectTagMap>
	{
		private intermediateNS.ProjectTagMap __intermediateEntity;
		public intermediateNS.ProjectTagMap _intermediateEntity { get { return __intermediateEntity; } }		
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}		
		public void _setIntermediateEntity(intermediateNS.ProjectTagMap intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public virtual long ProjectId
		{
			get { return __intermediateEntity.ProjectId; }
			set { __intermediateEntity.ProjectId = value; }
		}
		
		public virtual long TagId
		{
			get { return __intermediateEntity.TagId; }
			set { __intermediateEntity.TagId = value; }
		}
		
		public projectNS.Tag Project
		{	
			get { return _intermediateEntity.Project.GetEntity(); }
			set { if (value != null) _intermediateEntity.Project = value._intermediateEntity; else _intermediateEntity.Project = null; }
		}
		
		public projectNS.Project Tag
		{	
			get { return _intermediateEntity.Tag.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tag = value._intermediateEntity; else _intermediateEntity.Tag = null; }
		}
						
		public ProjectTagMap()
		{
			__intermediateEntity = new intermediateNS.ProjectTagMap();
			__intermediateEntity._entity = this;
		}
			
		public ProjectTagMap(intermediateNS.ProjectTagMap intermediateEntity)
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
	}
}

namespace canyoucode.Core.Models.Intermediate
{
	public class ProjectTagMap : IntermediateEntity<projectNS.ProjectTagMap, L2SNS.ProjectTagMap>
	{
		private bool _loadedFromDatabase = false;
		
		public PrimaryKeyField<projectNS.ProjectTagMap, intermediateNS.ProjectTagMap, L2SNS.ProjectTagMap, long> _projectId;
		public long ProjectId
		{
			get { return _projectId.Value; }
			set { _projectId.Value = value; }
		}
		
		public PrimaryKeyField<projectNS.ProjectTagMap, intermediateNS.ProjectTagMap, L2SNS.ProjectTagMap, long> _tagId;
		public long TagId
		{
			get { return _tagId.Value; }
			set { _tagId.Value = value; }
		}
	
		private intermediateNS.Tag _project;
		public intermediateNS.Tag Project
		{	
			get { return _project; }
			set { _project = value; if (!_loadedFromDatabase) { __tableEntity.Project = value._tableEntity; } }
		}
		
		private intermediateNS.Project _tag;
		public intermediateNS.Project Tag
		{	
			get { return _tag; }
			set { _tag = value; if (!_loadedFromDatabase) { __tableEntity.Tag = value._tableEntity; } }
		}
						
		public ProjectTagMap()
		{
			__tableEntity = new L2SNS.ProjectTagMap();
			initFields();
		}
			
		public ProjectTagMap(L2SNS.ProjectTagMap tableEntity)
		{
			_loadedFromDatabase = true;
			__tableEntity = tableEntity;
			initFields();
		}
		
		private void initFields()
		{
			_projectId = new PrimaryKeyField<projectNS.ProjectTagMap, intermediateNS.ProjectTagMap, L2SNS.ProjectTagMap, long>(this, __m => __m.ProjectId, (__m, val) => __m.ProjectId = val);
			_tagId = new PrimaryKeyField<projectNS.ProjectTagMap, intermediateNS.ProjectTagMap, L2SNS.ProjectTagMap, long>(this, __m => __m.TagId, (__m, val) => __m.TagId = val);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
			return true;
		}
	}
}

namespace canyoucode.Core.Models.L2S
{
	partial class ProjectTagMap : ITableEntity<intermediateNS.ProjectTagMap>
	{
        public intermediateNS.ProjectTagMap _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}
		
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.ProjectTagMap;
		}
	}
}

