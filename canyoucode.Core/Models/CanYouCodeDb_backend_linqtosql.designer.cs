#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace canyoucode.Core.Models.L2S
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CanYouCodeDb")]
	public partial class CanYouCodeDb_LinqToSqlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAccountAlert(AccountAlert instance);
    partial void UpdateAccountAlert(AccountAlert instance);
    partial void DeleteAccountAlert(AccountAlert instance);
    partial void InsertAttachment(Attachment instance);
    partial void UpdateAttachment(Attachment instance);
    partial void DeleteAttachment(Attachment instance);
    partial void InsertBid(Bid instance);
    partial void UpdateBid(Bid instance);
    partial void DeleteBid(Bid instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertConsultant(Consultant instance);
    partial void UpdateConsultant(Consultant instance);
    partial void DeleteConsultant(Consultant instance);
    partial void InsertCredential(Credential instance);
    partial void UpdateCredential(Credential instance);
    partial void DeleteCredential(Credential instance);
    partial void InsertEmployer(Employer instance);
    partial void UpdateEmployer(Employer instance);
    partial void DeleteEmployer(Employer instance);
    partial void InsertEmployerFeedback(EmployerFeedback instance);
    partial void UpdateEmployerFeedback(EmployerFeedback instance);
    partial void DeleteEmployerFeedback(EmployerFeedback instance);
    partial void InsertPortfolioEntry(PortfolioEntry instance);
    partial void UpdatePortfolioEntry(PortfolioEntry instance);
    partial void DeletePortfolioEntry(PortfolioEntry instance);
    partial void InsertProfileFeedback(ProfileFeedback instance);
    partial void UpdateProfileFeedback(ProfileFeedback instance);
    partial void DeleteProfileFeedback(ProfileFeedback instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectInvite(ProjectInvite instance);
    partial void UpdateProjectInvite(ProjectInvite instance);
    partial void DeleteProjectInvite(ProjectInvite instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertToken(Token instance);
    partial void UpdateToken(Token instance);
    partial void DeleteToken(Token instance);
    partial void InsertTenant(Tenant instance);
    partial void UpdateTenant(Tenant instance);
    partial void DeleteTenant(Tenant instance);
    partial void InsertProjectAttachmentMap(ProjectAttachmentMap instance);
    partial void UpdateProjectAttachmentMap(ProjectAttachmentMap instance);
    partial void DeleteProjectAttachmentMap(ProjectAttachmentMap instance);
    partial void InsertProjectTagMap(ProjectTagMap instance);
    partial void UpdateProjectTagMap(ProjectTagMap instance);
    partial void DeleteProjectTagMap(ProjectTagMap instance);
    partial void InsertTagCompanyMap(TagCompanyMap instance);
    partial void UpdateTagCompanyMap(TagCompanyMap instance);
    partial void DeleteTagCompanyMap(TagCompanyMap instance);
    #endregion
		
		public CanYouCodeDb_LinqToSqlDataContext() : 
				base("Data Source=.;Initial Catalog=CanYouCodeDb;Integrated Security=True;Connect Timeo" +
						"ut=10;User Instance=False", mappingSource)
		{
			OnCreated();
		}
		
		public CanYouCodeDb_LinqToSqlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CanYouCodeDb_LinqToSqlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CanYouCodeDb_LinqToSqlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CanYouCodeDb_LinqToSqlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Account
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<AccountAlert> AccountAlert
		{
			get
			{
				return this.GetTable<AccountAlert>();
			}
		}
		
		public System.Data.Linq.Table<Attachment> Attachment
		{
			get
			{
				return this.GetTable<Attachment>();
			}
		}
		
		public System.Data.Linq.Table<Bid> Bid
		{
			get
			{
				return this.GetTable<Bid>();
			}
		}
		
		public System.Data.Linq.Table<Company> Company
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Consultant> Consultant
		{
			get
			{
				return this.GetTable<Consultant>();
			}
		}
		
		public System.Data.Linq.Table<Credential> Credential
		{
			get
			{
				return this.GetTable<Credential>();
			}
		}
		
		public System.Data.Linq.Table<Employer> Employer
		{
			get
			{
				return this.GetTable<Employer>();
			}
		}
		
		public System.Data.Linq.Table<EmployerFeedback> EmployerFeedback
		{
			get
			{
				return this.GetTable<EmployerFeedback>();
			}
		}
		
		public System.Data.Linq.Table<PortfolioEntry> PortfolioEntry
		{
			get
			{
				return this.GetTable<PortfolioEntry>();
			}
		}
		
		public System.Data.Linq.Table<ProfileFeedback> ProfileFeedback
		{
			get
			{
				return this.GetTable<ProfileFeedback>();
			}
		}
		
		public System.Data.Linq.Table<Project> Project
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectInvite> ProjectInvite
		{
			get
			{
				return this.GetTable<ProjectInvite>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tag
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Token> Token
		{
			get
			{
				return this.GetTable<Token>();
			}
		}
		
		public System.Data.Linq.Table<Tenant> Tenant
		{
			get
			{
				return this.GetTable<Tenant>();
			}
		}
		
		public System.Data.Linq.Table<ProjectAttachmentMap> ProjectAttachmentMap
		{
			get
			{
				return this.GetTable<ProjectAttachmentMap>();
			}
		}
		
		public System.Data.Linq.Table<ProjectTagMap> ProjectTagMap
		{
			get
			{
				return this.GetTable<ProjectTagMap>();
			}
		}
		
		public System.Data.Linq.Table<TagCompanyMap> TagCompanyMap
		{
			get
			{
				return this.GetTable<TagCompanyMap>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.DateTime _DateAdded;
		
		private string _Email;
		
		private System.DateTime _LastLoginDate;
		
		private string _Password;
		
		private string _Phone;
		
		private int _Rating;
		
		private string _Status;
		
		private string _Type;
		
		private string _Username;
		
		private long _TenantId;
		
		private EntitySet<AccountAlert> _Alerts;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Employer> _Employer;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public Account()
		{
			this._Alerts = new EntitySet<AccountAlert>(new Action<AccountAlert>(this.attach_Alerts), new Action<AccountAlert>(this.detach_Alerts));
			this._Company = default(EntityRef<Company>);
			this._Employer = default(EntityRef<Employer>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountAlert", Storage="_Alerts", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<AccountAlert> Alerts
		{
			get
			{
				return this._Alerts;
			}
			set
			{
				this._Alerts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Company", Storage="_Company", ThisKey="Id", OtherKey="AccountId", IsUnique=true, IsForeignKey=false)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Account = null;
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Employer", Storage="_Employer", ThisKey="Id", OtherKey="AccountId", IsUnique=true, IsForeignKey=false)]
		public Employer Employer
		{
			get
			{
				return this._Employer.Entity;
			}
			set
			{
				Employer previousValue = this._Employer.Entity;
				if (((previousValue != value) 
							|| (this._Employer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employer.Entity = null;
						previousValue.Account = null;
					}
					this._Employer.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("Employer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Account", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alerts(AccountAlert entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Alerts(AccountAlert entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountAlert")]
	public partial class AccountAlert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _AccountId;
		
		private string _Status;
		
		private string _Message;
		
		private string _Type;
		
		private long _TenantId;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(System.Nullable<long> value);
    partial void OnAccountIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public AccountAlert()
		{
			this._Account = default(EntityRef<Account>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Account", Storage="_AccountId", DbType="BigInt")]
		public System.Nullable<long> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountAlert", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Alerts.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Alerts.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_AccountAlert", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.AccountAlerts.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.AccountAlerts.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attachment")]
	public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.DateTime _DateAdded;
		
		private string _OriginalFileName;
		
		private System.Guid _Token;
		
		private string _Url;
		
		private long _TenantId;
		
		private EntitySet<ProjectAttachmentMap> _ProjectAttachmentMap;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnOriginalFileNameChanging(string value);
    partial void OnOriginalFileNameChanged();
    partial void OnTokenChanging(System.Guid value);
    partial void OnTokenChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public Attachment()
		{
			this._ProjectAttachmentMap = new EntitySet<ProjectAttachmentMap>(new Action<ProjectAttachmentMap>(this.attach_ProjectAttachmentMap), new Action<ProjectAttachmentMap>(this.detach_ProjectAttachmentMap));
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalFileName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string OriginalFileName
		{
			get
			{
				return this._OriginalFileName;
			}
			set
			{
				if ((this._OriginalFileName != value))
				{
					this.OnOriginalFileNameChanging(value);
					this.SendPropertyChanging();
					this._OriginalFileName = value;
					this.SendPropertyChanged("OriginalFileName");
					this.OnOriginalFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Token", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Token
		{
			get
			{
				return this._Token;
			}
			set
			{
				if ((this._Token != value))
				{
					this.OnTokenChanging(value);
					this.SendPropertyChanging();
					this._Token = value;
					this.SendPropertyChanged("Token");
					this.OnTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attachment_ProjectAttachmentMap", Storage="_ProjectAttachmentMap", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<ProjectAttachmentMap> ProjectAttachmentMap
		{
			get
			{
				return this._ProjectAttachmentMap;
			}
			set
			{
				this._ProjectAttachmentMap.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Attachment", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Attachments.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Attachments.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectAttachmentMap(ProjectAttachmentMap entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectAttachmentMap(ProjectAttachmentMap entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bid")]
	public partial class Bid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CompanyId;
		
		private System.DateTime _DateCreated;
		
		private int _HoursOfEffort;
		
		private bool _Invited;
		
		private System.Nullable<int> _MaxQuote;
		
		private string _Message;
		
		private System.Nullable<int> _MinQuote;
		
		private long _ProjectId;
		
		private string _Status;
		
		private string _Timeframe;
		
		private long _TenantId;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(long value);
    partial void OnCompanyIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnHoursOfEffortChanging(int value);
    partial void OnHoursOfEffortChanged();
    partial void OnInvitedChanging(bool value);
    partial void OnInvitedChanged();
    partial void OnMaxQuoteChanging(System.Nullable<int> value);
    partial void OnMaxQuoteChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnMinQuoteChanging(System.Nullable<int> value);
    partial void OnMinQuoteChanged();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTimeframeChanging(string value);
    partial void OnTimeframeChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public Bid()
		{
			this._Company = default(EntityRef<Company>);
			this._Project = default(EntityRef<Project>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Company", Storage="_CompanyId", DbType="BigInt NOT NULL")]
		public long CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoursOfEffort", DbType="Int NOT NULL")]
		public int HoursOfEffort
		{
			get
			{
				return this._HoursOfEffort;
			}
			set
			{
				if ((this._HoursOfEffort != value))
				{
					this.OnHoursOfEffortChanging(value);
					this.SendPropertyChanging();
					this._HoursOfEffort = value;
					this.SendPropertyChanged("HoursOfEffort");
					this.OnHoursOfEffortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invited", DbType="Bit NOT NULL")]
		public bool Invited
		{
			get
			{
				return this._Invited;
			}
			set
			{
				if ((this._Invited != value))
				{
					this.OnInvitedChanging(value);
					this.SendPropertyChanging();
					this._Invited = value;
					this.SendPropertyChanged("Invited");
					this.OnInvitedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxQuote", DbType="Int")]
		public System.Nullable<int> MaxQuote
		{
			get
			{
				return this._MaxQuote;
			}
			set
			{
				if ((this._MaxQuote != value))
				{
					this.OnMaxQuoteChanging(value);
					this.SendPropertyChanging();
					this._MaxQuote = value;
					this.SendPropertyChanged("MaxQuote");
					this.OnMaxQuoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinQuote", DbType="Int")]
		public System.Nullable<int> MinQuote
		{
			get
			{
				return this._MinQuote;
			}
			set
			{
				if ((this._MinQuote != value))
				{
					this.OnMinQuoteChanging(value);
					this.SendPropertyChanging();
					this._MinQuote = value;
					this.SendPropertyChanged("MinQuote");
					this.OnMinQuoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Project", Storage="_ProjectId", DbType="BigInt NOT NULL")]
		public long ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timeframe", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Timeframe
		{
			get
			{
				return this._Timeframe;
			}
			set
			{
				if ((this._Timeframe != value))
				{
					this.OnTimeframeChanging(value);
					this.SendPropertyChanging();
					this._Timeframe = value;
					this.SendPropertyChanged("Timeframe");
					this.OnTimeframeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Bid", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Bids.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Bids.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Bid", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Bids.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Bids.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Bid", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Bids.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Bids.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _City;
		
		private string _Country;
		
		private string _Currency;
		
		private string _Description;
		
		private bool _IsVerified;
		
		private string _Logo;
		
		private System.Nullable<int> _MinimumRate;
		
		private string _Name;
		
		private string _Style;
		
		private string _Type;
		
		private string _Website;
		
		private long _TenantId;
		
		private EntitySet<Bid> _Bids;
		
		private EntitySet<Consultant> _Consultants;
		
		private EntitySet<EmployerFeedback> _FeedbackReceived;
		
		private EntitySet<PortfolioEntry> _Portfolio;
		
		private EntitySet<ProfileFeedback> _FeedbackGiven;
		
		private EntitySet<ProjectInvite> _ProjectInvites;
		
		private EntitySet<TagCompanyMap> _TagCompanyMap;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsVerifiedChanging(bool value);
    partial void OnIsVerifiedChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    partial void OnMinimumRateChanging(System.Nullable<int> value);
    partial void OnMinimumRateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStyleChanging(string value);
    partial void OnStyleChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public Company()
		{
			this._Bids = new EntitySet<Bid>(new Action<Bid>(this.attach_Bids), new Action<Bid>(this.detach_Bids));
			this._Consultants = new EntitySet<Consultant>(new Action<Consultant>(this.attach_Consultants), new Action<Consultant>(this.detach_Consultants));
			this._FeedbackReceived = new EntitySet<EmployerFeedback>(new Action<EmployerFeedback>(this.attach_FeedbackReceived), new Action<EmployerFeedback>(this.detach_FeedbackReceived));
			this._Portfolio = new EntitySet<PortfolioEntry>(new Action<PortfolioEntry>(this.attach_Portfolio), new Action<PortfolioEntry>(this.detach_Portfolio));
			this._FeedbackGiven = new EntitySet<ProfileFeedback>(new Action<ProfileFeedback>(this.attach_FeedbackGiven), new Action<ProfileFeedback>(this.detach_FeedbackGiven));
			this._ProjectInvites = new EntitySet<ProjectInvite>(new Action<ProjectInvite>(this.attach_ProjectInvites), new Action<ProjectInvite>(this.detach_ProjectInvites));
			this._TagCompanyMap = new EntitySet<TagCompanyMap>(new Action<TagCompanyMap>(this.attach_TagCompanyMap), new Action<TagCompanyMap>(this.detach_TagCompanyMap));
			this._Account = default(EntityRef<Account>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Account", Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="NVarChar(50)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVerified", DbType="Bit NOT NULL")]
		public bool IsVerified
		{
			get
			{
				return this._IsVerified;
			}
			set
			{
				if ((this._IsVerified != value))
				{
					this.OnIsVerifiedChanging(value);
					this.SendPropertyChanging();
					this._IsVerified = value;
					this.SendPropertyChanged("IsVerified");
					this.OnIsVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="NVarChar(250)")]
		public string Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumRate", DbType="Int")]
		public System.Nullable<int> MinimumRate
		{
			get
			{
				return this._MinimumRate;
			}
			set
			{
				if ((this._MinimumRate != value))
				{
					this.OnMinimumRateChanging(value);
					this.SendPropertyChanging();
					this._MinimumRate = value;
					this.SendPropertyChanged("MinimumRate");
					this.OnMinimumRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Style", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Style
		{
			get
			{
				return this._Style;
			}
			set
			{
				if ((this._Style != value))
				{
					this.OnStyleChanging(value);
					this.SendPropertyChanging();
					this._Style = value;
					this.SendPropertyChanged("Style");
					this.OnStyleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(200)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Bid", Storage="_Bids", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<Bid> Bids
		{
			get
			{
				return this._Bids;
			}
			set
			{
				this._Bids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Consultant", Storage="_Consultants", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<Consultant> Consultants
		{
			get
			{
				return this._Consultants;
			}
			set
			{
				this._Consultants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_EmployerFeedback", Storage="_FeedbackReceived", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<EmployerFeedback> FeedbackReceived
		{
			get
			{
				return this._FeedbackReceived;
			}
			set
			{
				this._FeedbackReceived.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_PortfolioEntry", Storage="_Portfolio", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<PortfolioEntry> Portfolio
		{
			get
			{
				return this._Portfolio;
			}
			set
			{
				this._Portfolio.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ProfileFeedback", Storage="_FeedbackGiven", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<ProfileFeedback> FeedbackGiven
		{
			get
			{
				return this._FeedbackGiven;
			}
			set
			{
				this._FeedbackGiven.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ProjectInvite", Storage="_ProjectInvites", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<ProjectInvite> ProjectInvites
		{
			get
			{
				return this._ProjectInvites;
			}
			set
			{
				this._ProjectInvites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_TagCompanyMap", Storage="_TagCompanyMap", ThisKey="Id", OtherKey="TagId")]
		public EntitySet<TagCompanyMap> TagCompanyMap
		{
			get
			{
				return this._TagCompanyMap;
			}
			set
			{
				this._TagCompanyMap.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Company", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Company = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Company = this;
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Company", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bids(Bid entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Bids(Bid entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Consultants(Consultant entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Consultants(Consultant entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_FeedbackReceived(EmployerFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_FeedbackReceived(EmployerFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Portfolio(PortfolioEntry entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Portfolio(PortfolioEntry entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_FeedbackGiven(ProfileFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_FeedbackGiven(ProfileFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ProjectInvites(ProjectInvite entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ProjectInvites(ProjectInvite entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_TagCompanyMap(TagCompanyMap entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_TagCompanyMap(TagCompanyMap entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Consultant")]
	public partial class Consultant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CompanyId;
		
		private string _Designation;
		
		private string _LinkedinProfile;
		
		private string _Name;
		
		private string _Picture;
		
		private long _TenantId;
		
		private EntitySet<Credential> _Credentials;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(long value);
    partial void OnCompanyIdChanged();
    partial void OnDesignationChanging(string value);
    partial void OnDesignationChanged();
    partial void OnLinkedinProfileChanging(string value);
    partial void OnLinkedinProfileChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public Consultant()
		{
			this._Credentials = new EntitySet<Credential>(new Action<Credential>(this.attach_Credentials), new Action<Credential>(this.detach_Credentials));
			this._Company = default(EntityRef<Company>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Company", Storage="_CompanyId", DbType="BigInt NOT NULL")]
		public long CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designation", DbType="NVarChar(100)")]
		public string Designation
		{
			get
			{
				return this._Designation;
			}
			set
			{
				if ((this._Designation != value))
				{
					this.OnDesignationChanging(value);
					this.SendPropertyChanging();
					this._Designation = value;
					this.SendPropertyChanged("Designation");
					this.OnDesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkedinProfile", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string LinkedinProfile
		{
			get
			{
				return this._LinkedinProfile;
			}
			set
			{
				if ((this._LinkedinProfile != value))
				{
					this.OnLinkedinProfileChanging(value);
					this.SendPropertyChanging();
					this._LinkedinProfile = value;
					this.SendPropertyChanged("LinkedinProfile");
					this.OnLinkedinProfileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Consultant_Credential", Storage="_Credentials", ThisKey="Id", OtherKey="ConsultantId")]
		public EntitySet<Credential> Credentials
		{
			get
			{
				return this._Credentials;
			}
			set
			{
				this._Credentials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Consultant", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Consultants.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Consultants.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Consultant", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Consultants.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Consultants.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credentials(Credential entity)
		{
			this.SendPropertyChanging();
			entity.Consultant = this;
		}
		
		private void detach_Credentials(Credential entity)
		{
			this.SendPropertyChanging();
			entity.Consultant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Credential")]
	public partial class Credential : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ConsultantId;
		
		private string _Link;
		
		private string _Type;
		
		private long _TenantId;
		
		private EntityRef<Consultant> _Consultant;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnConsultantIdChanging(long value);
    partial void OnConsultantIdChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public Credential()
		{
			this._Consultant = default(EntityRef<Consultant>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Consultant", Storage="_ConsultantId", DbType="BigInt NOT NULL")]
		public long ConsultantId
		{
			get
			{
				return this._ConsultantId;
			}
			set
			{
				if ((this._ConsultantId != value))
				{
					this.OnConsultantIdChanging(value);
					this.SendPropertyChanging();
					this._ConsultantId = value;
					this.SendPropertyChanged("ConsultantId");
					this.OnConsultantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Consultant_Credential", Storage="_Consultant", ThisKey="ConsultantId", OtherKey="Id", IsForeignKey=true)]
		public Consultant Consultant
		{
			get
			{
				return this._Consultant.Entity;
			}
			set
			{
				Consultant previousValue = this._Consultant.Entity;
				if (((previousValue != value) 
							|| (this._Consultant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Consultant.Entity = null;
						previousValue.Credentials.Remove(this);
					}
					this._Consultant.Entity = value;
					if ((value != null))
					{
						value.Credentials.Add(this);
						this._ConsultantId = value.Id;
					}
					else
					{
						this._ConsultantId = default(long);
					}
					this.SendPropertyChanged("Consultant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Credential", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Credentials.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Credentials.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employer")]
	public partial class Employer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _City;
		
		private string _Country;
		
		private bool _IsVerified;
		
		private string _Name;
		
		private string _Picture;
		
		private long _TenantId;
		
		private EntitySet<EmployerFeedback> _FeedbackGiven;
		
		private EntitySet<ProfileFeedback> _FeedbackReceived;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnIsVerifiedChanging(bool value);
    partial void OnIsVerifiedChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public Employer()
		{
			this._FeedbackGiven = new EntitySet<EmployerFeedback>(new Action<EmployerFeedback>(this.attach_FeedbackGiven), new Action<EmployerFeedback>(this.detach_FeedbackGiven));
			this._FeedbackReceived = new EntitySet<ProfileFeedback>(new Action<ProfileFeedback>(this.attach_FeedbackReceived), new Action<ProfileFeedback>(this.detach_FeedbackReceived));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Account = default(EntityRef<Account>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Account", Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVerified", DbType="Bit NOT NULL")]
		public bool IsVerified
		{
			get
			{
				return this._IsVerified;
			}
			set
			{
				if ((this._IsVerified != value))
				{
					this.OnIsVerifiedChanging(value);
					this.SendPropertyChanging();
					this._IsVerified = value;
					this.SendPropertyChanged("IsVerified");
					this.OnIsVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(50)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employer_EmployerFeedback", Storage="_FeedbackGiven", ThisKey="Id", OtherKey="EmployerId")]
		public EntitySet<EmployerFeedback> FeedbackGiven
		{
			get
			{
				return this._FeedbackGiven;
			}
			set
			{
				this._FeedbackGiven.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employer_ProfileFeedback", Storage="_FeedbackReceived", ThisKey="Id", OtherKey="EmployerId")]
		public EntitySet<ProfileFeedback> FeedbackReceived
		{
			get
			{
				return this._FeedbackReceived;
			}
			set
			{
				this._FeedbackReceived.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employer_Project", Storage="_Projects", ThisKey="Id", OtherKey="EmployerId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Employer", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Employer = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Employer = this;
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Employer", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Employers.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Employers.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeedbackGiven(EmployerFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Employer = this;
		}
		
		private void detach_FeedbackGiven(EmployerFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Employer = null;
		}
		
		private void attach_FeedbackReceived(ProfileFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Employer = this;
		}
		
		private void detach_FeedbackReceived(ProfileFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Employer = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Employer = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Employer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployerFeedback")]
	public partial class EmployerFeedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CompanyId;
		
		private long _EmployerId;
		
		private long _ProjectId;
		
		private string _Rating;
		
		private string _Text;
		
		private long _TenantId;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Employer> _Employer;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(long value);
    partial void OnCompanyIdChanged();
    partial void OnEmployerIdChanging(long value);
    partial void OnEmployerIdChanged();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    partial void OnRatingChanging(string value);
    partial void OnRatingChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public EmployerFeedback()
		{
			this._Company = default(EntityRef<Company>);
			this._Employer = default(EntityRef<Employer>);
			this._Project = default(EntityRef<Project>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Company", Storage="_CompanyId", DbType="BigInt NOT NULL")]
		public long CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Employer", Storage="_EmployerId", DbType="BigInt NOT NULL")]
		public long EmployerId
		{
			get
			{
				return this._EmployerId;
			}
			set
			{
				if ((this._EmployerId != value))
				{
					this.OnEmployerIdChanging(value);
					this.SendPropertyChanging();
					this._EmployerId = value;
					this.SendPropertyChanged("EmployerId");
					this.OnEmployerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Project", Storage="_ProjectId", DbType="BigInt NOT NULL")]
		public long ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_EmployerFeedback", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.FeedbackReceived.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.FeedbackReceived.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employer_EmployerFeedback", Storage="_Employer", ThisKey="EmployerId", OtherKey="Id", IsForeignKey=true)]
		public Employer Employer
		{
			get
			{
				return this._Employer.Entity;
			}
			set
			{
				Employer previousValue = this._Employer.Entity;
				if (((previousValue != value) 
							|| (this._Employer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employer.Entity = null;
						previousValue.FeedbackGiven.Remove(this);
					}
					this._Employer.Entity = value;
					if ((value != null))
					{
						value.FeedbackGiven.Add(this);
						this._EmployerId = value.Id;
					}
					else
					{
						this._EmployerId = default(long);
					}
					this.SendPropertyChanged("Employer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_EmployerFeedback", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.EmployerFeedback = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.EmployerFeedback = this;
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_EmployerFeedback", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.EmployerFeedbacks.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.EmployerFeedbacks.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PortfolioEntry")]
	public partial class PortfolioEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CompanyId;
		
		private string _Content;
		
		private string _Description;
		
		private string _Image;
		
		private System.Nullable<long> _ProjectId;
		
		private string _Title;
		
		private string _Type;
		
		private long _TenantId;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(long value);
    partial void OnCompanyIdChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnProjectIdChanging(System.Nullable<long> value);
    partial void OnProjectIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public PortfolioEntry()
		{
			this._Company = default(EntityRef<Company>);
			this._Project = default(EntityRef<Project>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Company", Storage="_CompanyId", DbType="BigInt NOT NULL")]
		public long CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Project", Storage="_ProjectId", DbType="BigInt")]
		public System.Nullable<long> ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_PortfolioEntry", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Portfolio.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Portfolio.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_PortfolioEntry", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.PortfolioEntry = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.PortfolioEntry = this;
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_PortfolioEntry", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.PortfolioEntries.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.PortfolioEntries.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProfileFeedback")]
	public partial class ProfileFeedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CompanyId;
		
		private long _EmployerId;
		
		private long _ProjectId;
		
		private string _Rating;
		
		private string _Text;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Employer> _Employer;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(long value);
    partial void OnCompanyIdChanged();
    partial void OnEmployerIdChanging(long value);
    partial void OnEmployerIdChanged();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    partial void OnRatingChanging(string value);
    partial void OnRatingChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public ProfileFeedback()
		{
			this._Company = default(EntityRef<Company>);
			this._Employer = default(EntityRef<Employer>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Company", Storage="_CompanyId", DbType="BigInt NOT NULL")]
		public long CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Employer", Storage="_EmployerId", DbType="BigInt NOT NULL")]
		public long EmployerId
		{
			get
			{
				return this._EmployerId;
			}
			set
			{
				if ((this._EmployerId != value))
				{
					this.OnEmployerIdChanging(value);
					this.SendPropertyChanging();
					this._EmployerId = value;
					this.SendPropertyChanged("EmployerId");
					this.OnEmployerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Project", Storage="_ProjectId", DbType="BigInt NOT NULL")]
		public long ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ProfileFeedback", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.FeedbackGiven.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.FeedbackGiven.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employer_ProfileFeedback", Storage="_Employer", ThisKey="EmployerId", OtherKey="Id", IsForeignKey=true)]
		public Employer Employer
		{
			get
			{
				return this._Employer.Entity;
			}
			set
			{
				Employer previousValue = this._Employer.Entity;
				if (((previousValue != value) 
							|| (this._Employer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employer.Entity = null;
						previousValue.FeedbackReceived.Remove(this);
					}
					this._Employer.Entity = value;
					if ((value != null))
					{
						value.FeedbackReceived.Add(this);
						this._EmployerId = value.Id;
					}
					else
					{
						this._EmployerId = default(long);
					}
					this.SendPropertyChanged("Employer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProfileFeedback", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProfileFeedback = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProfileFeedback = this;
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private int _Budget;
		
		private System.DateTime _ClosingDate;
		
		private string _Currency;
		
		private System.DateTime _DateAdded;
		
		private string _Description;
		
		private string _DescriptionText;
		
		private long _EmployerId;
		
		private string _Status;
		
		private string _Title;
		
		private long _TenantId;
		
		private EntitySet<Bid> _Bids;
		
		private EntityRef<EmployerFeedback> _EmployerFeedback;
		
		private EntityRef<PortfolioEntry> _PortfolioEntry;
		
		private EntityRef<ProfileFeedback> _ProfileFeedback;
		
		private EntitySet<ProjectInvite> _ProjectInvites;
		
		private EntitySet<ProjectAttachmentMap> _ProjectAttachmentMap;
		
		private EntitySet<ProjectTagMap> _ProjectTagMap;
		
		private EntityRef<Employer> _Employer;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnBudgetChanging(int value);
    partial void OnBudgetChanged();
    partial void OnClosingDateChanging(System.DateTime value);
    partial void OnClosingDateChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDescriptionTextChanging(string value);
    partial void OnDescriptionTextChanged();
    partial void OnEmployerIdChanging(long value);
    partial void OnEmployerIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public Project()
		{
			this._Bids = new EntitySet<Bid>(new Action<Bid>(this.attach_Bids), new Action<Bid>(this.detach_Bids));
			this._EmployerFeedback = default(EntityRef<EmployerFeedback>);
			this._PortfolioEntry = default(EntityRef<PortfolioEntry>);
			this._ProfileFeedback = default(EntityRef<ProfileFeedback>);
			this._ProjectInvites = new EntitySet<ProjectInvite>(new Action<ProjectInvite>(this.attach_ProjectInvites), new Action<ProjectInvite>(this.detach_ProjectInvites));
			this._ProjectAttachmentMap = new EntitySet<ProjectAttachmentMap>(new Action<ProjectAttachmentMap>(this.attach_ProjectAttachmentMap), new Action<ProjectAttachmentMap>(this.detach_ProjectAttachmentMap));
			this._ProjectTagMap = new EntitySet<ProjectTagMap>(new Action<ProjectTagMap>(this.attach_ProjectTagMap), new Action<ProjectTagMap>(this.detach_ProjectTagMap));
			this._Employer = default(EntityRef<Employer>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Budget", DbType="Int NOT NULL")]
		public int Budget
		{
			get
			{
				return this._Budget;
			}
			set
			{
				if ((this._Budget != value))
				{
					this.OnBudgetChanging(value);
					this.SendPropertyChanging();
					this._Budget = value;
					this.SendPropertyChanged("Budget");
					this.OnBudgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosingDate", DbType="DateTime NOT NULL")]
		public System.DateTime ClosingDate
		{
			get
			{
				return this._ClosingDate;
			}
			set
			{
				if ((this._ClosingDate != value))
				{
					this.OnClosingDateChanging(value);
					this.SendPropertyChanging();
					this._ClosingDate = value;
					this.SendPropertyChanged("ClosingDate");
					this.OnClosingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionText", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DescriptionText
		{
			get
			{
				return this._DescriptionText;
			}
			set
			{
				if ((this._DescriptionText != value))
				{
					this.OnDescriptionTextChanging(value);
					this.SendPropertyChanging();
					this._DescriptionText = value;
					this.SendPropertyChanged("DescriptionText");
					this.OnDescriptionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Employer", Storage="_EmployerId", DbType="BigInt NOT NULL")]
		public long EmployerId
		{
			get
			{
				return this._EmployerId;
			}
			set
			{
				if ((this._EmployerId != value))
				{
					this.OnEmployerIdChanging(value);
					this.SendPropertyChanging();
					this._EmployerId = value;
					this.SendPropertyChanged("EmployerId");
					this.OnEmployerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Bid", Storage="_Bids", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<Bid> Bids
		{
			get
			{
				return this._Bids;
			}
			set
			{
				this._Bids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_EmployerFeedback", Storage="_EmployerFeedback", ThisKey="Id", OtherKey="ProjectId", IsUnique=true, IsForeignKey=false)]
		public EmployerFeedback EmployerFeedback
		{
			get
			{
				return this._EmployerFeedback.Entity;
			}
			set
			{
				EmployerFeedback previousValue = this._EmployerFeedback.Entity;
				if (((previousValue != value) 
							|| (this._EmployerFeedback.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployerFeedback.Entity = null;
						previousValue.Project = null;
					}
					this._EmployerFeedback.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("EmployerFeedback");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_PortfolioEntry", Storage="_PortfolioEntry", ThisKey="Id", OtherKey="ProjectId", IsUnique=true, IsForeignKey=false)]
		public PortfolioEntry PortfolioEntry
		{
			get
			{
				return this._PortfolioEntry.Entity;
			}
			set
			{
				PortfolioEntry previousValue = this._PortfolioEntry.Entity;
				if (((previousValue != value) 
							|| (this._PortfolioEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PortfolioEntry.Entity = null;
						previousValue.Project = null;
					}
					this._PortfolioEntry.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("PortfolioEntry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProfileFeedback", Storage="_ProfileFeedback", ThisKey="Id", OtherKey="ProjectId", IsUnique=true, IsForeignKey=false)]
		public ProfileFeedback ProfileFeedback
		{
			get
			{
				return this._ProfileFeedback.Entity;
			}
			set
			{
				ProfileFeedback previousValue = this._ProfileFeedback.Entity;
				if (((previousValue != value) 
							|| (this._ProfileFeedback.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProfileFeedback.Entity = null;
						previousValue.Project = null;
					}
					this._ProfileFeedback.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("ProfileFeedback");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectInvite", Storage="_ProjectInvites", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<ProjectInvite> ProjectInvites
		{
			get
			{
				return this._ProjectInvites;
			}
			set
			{
				this._ProjectInvites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectAttachmentMap", Storage="_ProjectAttachmentMap", ThisKey="Id", OtherKey="AttachmentId")]
		public EntitySet<ProjectAttachmentMap> ProjectAttachmentMap
		{
			get
			{
				return this._ProjectAttachmentMap;
			}
			set
			{
				this._ProjectAttachmentMap.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTagMap", Storage="_ProjectTagMap", ThisKey="Id", OtherKey="TagId")]
		public EntitySet<ProjectTagMap> ProjectTagMap
		{
			get
			{
				return this._ProjectTagMap;
			}
			set
			{
				this._ProjectTagMap.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employer_Project", Storage="_Employer", ThisKey="EmployerId", OtherKey="Id", IsForeignKey=true)]
		public Employer Employer
		{
			get
			{
				return this._Employer.Entity;
			}
			set
			{
				Employer previousValue = this._Employer.Entity;
				if (((previousValue != value) 
							|| (this._Employer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employer.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Employer.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._EmployerId = value.Id;
					}
					else
					{
						this._EmployerId = default(long);
					}
					this.SendPropertyChanged("Employer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Project", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bids(Bid entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Bids(Bid entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectInvites(ProjectInvite entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectInvites(ProjectInvite entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectAttachmentMap(ProjectAttachmentMap entity)
		{
			this.SendPropertyChanging();
			entity.Attachment = this;
		}
		
		private void detach_ProjectAttachmentMap(ProjectAttachmentMap entity)
		{
			this.SendPropertyChanging();
			entity.Attachment = null;
		}
		
		private void attach_ProjectTagMap(ProjectTagMap entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_ProjectTagMap(ProjectTagMap entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectInvite")]
	public partial class ProjectInvite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CompanyId;
		
		private long _ProjectId;
		
		private string _Status;
		
		private long _TenantId;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(long value);
    partial void OnCompanyIdChanged();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public ProjectInvite()
		{
			this._Company = default(EntityRef<Company>);
			this._Project = default(EntityRef<Project>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Company", Storage="_CompanyId", DbType="BigInt NOT NULL")]
		public long CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Project", Storage="_ProjectId", DbType="BigInt NOT NULL")]
		public long ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ProjectInvite", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ProjectInvites.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ProjectInvites.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectInvite", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectInvites.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectInvites.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_ProjectInvite", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.ProjectInvites.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.ProjectInvites.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private string _Slug;
		
		private long _TenantId;
		
		private EntitySet<ProjectTagMap> _ProjectTagMap;
		
		private EntitySet<TagCompanyMap> _TagCompanyMap;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSlugChanging(string value);
    partial void OnSlugChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public Tag()
		{
			this._ProjectTagMap = new EntitySet<ProjectTagMap>(new Action<ProjectTagMap>(this.attach_ProjectTagMap), new Action<ProjectTagMap>(this.detach_ProjectTagMap));
			this._TagCompanyMap = new EntitySet<TagCompanyMap>(new Action<TagCompanyMap>(this.attach_TagCompanyMap), new Action<TagCompanyMap>(this.detach_TagCompanyMap));
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Slug", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Slug
		{
			get
			{
				return this._Slug;
			}
			set
			{
				if ((this._Slug != value))
				{
					this.OnSlugChanging(value);
					this.SendPropertyChanging();
					this._Slug = value;
					this.SendPropertyChanged("Slug");
					this.OnSlugChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_ProjectTagMap", Storage="_ProjectTagMap", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<ProjectTagMap> ProjectTagMap
		{
			get
			{
				return this._ProjectTagMap;
			}
			set
			{
				this._ProjectTagMap.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_TagCompanyMap", Storage="_TagCompanyMap", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<TagCompanyMap> TagCompanyMap
		{
			get
			{
				return this._TagCompanyMap;
			}
			set
			{
				this._TagCompanyMap.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Tag", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectTagMap(ProjectTagMap entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectTagMap(ProjectTagMap entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_TagCompanyMap(TagCompanyMap entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_TagCompanyMap(TagCompanyMap entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Token")]
	public partial class Token : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.DateTime _CreatedDate;
		
		private string _Data;
		
		private string _Key;
		
		private string _Type;
		
		private long _TenantId;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public Token()
		{
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Key", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Token", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Tokens.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Tokens.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tenant")]
	public partial class Tenant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private string _DomainName;
		
		private string _ViewStore;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<AccountAlert> _AccountAlerts;
		
		private EntitySet<Attachment> _Attachments;
		
		private EntitySet<Bid> _Bids;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<Consultant> _Consultants;
		
		private EntitySet<Credential> _Credentials;
		
		private EntitySet<Employer> _Employers;
		
		private EntitySet<EmployerFeedback> _EmployerFeedbacks;
		
		private EntitySet<PortfolioEntry> _PortfolioEntries;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<ProjectInvite> _ProjectInvites;
		
		private EntitySet<Tag> _Tags;
		
		private EntitySet<Token> _Tokens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDomainNameChanging(string value);
    partial void OnDomainNameChanged();
    partial void OnViewStoreChanging(string value);
    partial void OnViewStoreChanged();
    #endregion
		
		public Tenant()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._AccountAlerts = new EntitySet<AccountAlert>(new Action<AccountAlert>(this.attach_AccountAlerts), new Action<AccountAlert>(this.detach_AccountAlerts));
			this._Attachments = new EntitySet<Attachment>(new Action<Attachment>(this.attach_Attachments), new Action<Attachment>(this.detach_Attachments));
			this._Bids = new EntitySet<Bid>(new Action<Bid>(this.attach_Bids), new Action<Bid>(this.detach_Bids));
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Consultants = new EntitySet<Consultant>(new Action<Consultant>(this.attach_Consultants), new Action<Consultant>(this.detach_Consultants));
			this._Credentials = new EntitySet<Credential>(new Action<Credential>(this.attach_Credentials), new Action<Credential>(this.detach_Credentials));
			this._Employers = new EntitySet<Employer>(new Action<Employer>(this.attach_Employers), new Action<Employer>(this.detach_Employers));
			this._EmployerFeedbacks = new EntitySet<EmployerFeedback>(new Action<EmployerFeedback>(this.attach_EmployerFeedbacks), new Action<EmployerFeedback>(this.detach_EmployerFeedbacks));
			this._PortfolioEntries = new EntitySet<PortfolioEntry>(new Action<PortfolioEntry>(this.attach_PortfolioEntries), new Action<PortfolioEntry>(this.detach_PortfolioEntries));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._ProjectInvites = new EntitySet<ProjectInvite>(new Action<ProjectInvite>(this.attach_ProjectInvites), new Action<ProjectInvite>(this.detach_ProjectInvites));
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			this._Tokens = new EntitySet<Token>(new Action<Token>(this.attach_Tokens), new Action<Token>(this.detach_Tokens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DomainName
		{
			get
			{
				return this._DomainName;
			}
			set
			{
				if ((this._DomainName != value))
				{
					this.OnDomainNameChanging(value);
					this.SendPropertyChanging();
					this._DomainName = value;
					this.SendPropertyChanged("DomainName");
					this.OnDomainNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewStore", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ViewStore
		{
			get
			{
				return this._ViewStore;
			}
			set
			{
				if ((this._ViewStore != value))
				{
					this.OnViewStoreChanging(value);
					this.SendPropertyChanging();
					this._ViewStore = value;
					this.SendPropertyChanged("ViewStore");
					this.OnViewStoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Account", Storage="_Accounts", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_AccountAlert", Storage="_AccountAlerts", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<AccountAlert> AccountAlerts
		{
			get
			{
				return this._AccountAlerts;
			}
			set
			{
				this._AccountAlerts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Attachment", Storage="_Attachments", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Attachment> Attachments
		{
			get
			{
				return this._Attachments;
			}
			set
			{
				this._Attachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Bid", Storage="_Bids", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Bid> Bids
		{
			get
			{
				return this._Bids;
			}
			set
			{
				this._Bids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Company", Storage="_Companies", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Consultant", Storage="_Consultants", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Consultant> Consultants
		{
			get
			{
				return this._Consultants;
			}
			set
			{
				this._Consultants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Credential", Storage="_Credentials", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Credential> Credentials
		{
			get
			{
				return this._Credentials;
			}
			set
			{
				this._Credentials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Employer", Storage="_Employers", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Employer> Employers
		{
			get
			{
				return this._Employers;
			}
			set
			{
				this._Employers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_EmployerFeedback", Storage="_EmployerFeedbacks", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<EmployerFeedback> EmployerFeedbacks
		{
			get
			{
				return this._EmployerFeedbacks;
			}
			set
			{
				this._EmployerFeedbacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_PortfolioEntry", Storage="_PortfolioEntries", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<PortfolioEntry> PortfolioEntries
		{
			get
			{
				return this._PortfolioEntries;
			}
			set
			{
				this._PortfolioEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Project", Storage="_Projects", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_ProjectInvite", Storage="_ProjectInvites", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<ProjectInvite> ProjectInvites
		{
			get
			{
				return this._ProjectInvites;
			}
			set
			{
				this._ProjectInvites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Tag", Storage="_Tags", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Token", Storage="_Tokens", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Token> Tokens
		{
			get
			{
				return this._Tokens;
			}
			set
			{
				this._Tokens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_AccountAlerts(AccountAlert entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_AccountAlerts(AccountAlert entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Bids(Bid entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Bids(Bid entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Consultants(Consultant entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Consultants(Consultant entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Credentials(Credential entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Credentials(Credential entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Employers(Employer entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Employers(Employer entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_EmployerFeedbacks(EmployerFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_EmployerFeedbacks(EmployerFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_PortfolioEntries(PortfolioEntry entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_PortfolioEntries(PortfolioEntry entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_ProjectInvites(ProjectInvite entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_ProjectInvites(ProjectInvite entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Tokens(Token entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Tokens(Token entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectAttachmentMap")]
	public partial class ProjectAttachmentMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AttachmentId;
		
		private long _ProjectId;
		
		private EntityRef<Project> _Attachment;
		
		private EntityRef<Attachment> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttachmentIdChanging(long value);
    partial void OnAttachmentIdChanged();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    #endregion
		
		public ProjectAttachmentMap()
		{
			this._Attachment = default(EntityRef<Project>);
			this._Project = default(EntityRef<Attachment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Attachment", Storage="_AttachmentId", DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true)]
		public long AttachmentId
		{
			get
			{
				return this._AttachmentId;
			}
			set
			{
				if ((this._AttachmentId != value))
				{
					this.OnAttachmentIdChanging(value);
					this.SendPropertyChanging();
					this._AttachmentId = value;
					this.SendPropertyChanged("AttachmentId");
					this.OnAttachmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Project", Storage="_ProjectId", DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true)]
		public long ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectAttachmentMap", Storage="_Attachment", ThisKey="AttachmentId", OtherKey="Id", IsForeignKey=true)]
		public Project Attachment
		{
			get
			{
				return this._Attachment.Entity;
			}
			set
			{
				Project previousValue = this._Attachment.Entity;
				if (((previousValue != value) 
							|| (this._Attachment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attachment.Entity = null;
						previousValue.ProjectAttachmentMap.Remove(this);
					}
					this._Attachment.Entity = value;
					if ((value != null))
					{
						value.ProjectAttachmentMap.Add(this);
						this._AttachmentId = value.Id;
					}
					else
					{
						this._AttachmentId = default(long);
					}
					this.SendPropertyChanged("Attachment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attachment_ProjectAttachmentMap", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true)]
		public Attachment Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Attachment previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectAttachmentMap.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectAttachmentMap.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectTagMap")]
	public partial class ProjectTagMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ProjectId;
		
		private long _TagId;
		
		private EntityRef<Tag> _Project;
		
		private EntityRef<Project> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    partial void OnTagIdChanging(long value);
    partial void OnTagIdChanged();
    #endregion
		
		public ProjectTagMap()
		{
			this._Project = default(EntityRef<Tag>);
			this._Tag = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Project", Storage="_ProjectId", DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true)]
		public long ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tag", Storage="_TagId", DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true)]
		public long TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_ProjectTagMap", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true)]
		public Tag Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Tag previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectTagMap.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectTagMap.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTagMap", Storage="_Tag", ThisKey="TagId", OtherKey="Id", IsForeignKey=true)]
		public Project Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Project previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.ProjectTagMap.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.ProjectTagMap.Add(this);
						this._TagId = value.Id;
					}
					else
					{
						this._TagId = default(long);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TagCompanyMap")]
	public partial class TagCompanyMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CompanyId;
		
		private long _TagId;
		
		private EntityRef<Tag> _Company;
		
		private EntityRef<Company> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(long value);
    partial void OnCompanyIdChanged();
    partial void OnTagIdChanging(long value);
    partial void OnTagIdChanged();
    #endregion
		
		public TagCompanyMap()
		{
			this._Company = default(EntityRef<Tag>);
			this._Tag = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Company", Storage="_CompanyId", DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true)]
		public long CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Tag", Storage="_TagId", DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true)]
		public long TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_TagCompanyMap", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
		public Tag Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Tag previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.TagCompanyMap.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.TagCompanyMap.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_TagCompanyMap", Storage="_Tag", ThisKey="TagId", OtherKey="Id", IsForeignKey=true)]
		public Company Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Company previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.TagCompanyMap.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.TagCompanyMap.Add(this);
						this._TagId = value.Id;
					}
					else
					{
						this._TagId = default(long);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
