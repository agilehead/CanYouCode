//This code was auto-generated by AgileFx Modeler.
//Changes to this file will be lost if the file is regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using System.Text;

using AgileFx.ORM;
using AgileFx.ORM.ObjectComposition;
using AgileFx.ORM.Mapping;
using AgileFx.ORM.Utils;
using AgileFx.ORM.Backends.LinqToSql;

using projectNS = canyoucode.Core;
using intermediateNS = canyoucode.Core.Intermediate;
using L2SNS = canyoucode.Core.L2S;
using pocoNS = canyoucode.Core.POCO;

namespace canyoucode.Core
{
    public class Entities : L2SDataContext
    {
		public Entities()
		{
			this.useDefaultConnectionString = true;
		}
		
		public Entities(string connectionString)
		{
			this.useDefaultConnectionString = false;
			this.connectionString = connectionString;
		}
	
        public override System.Data.Linq.DataContext GetLinqToSqlDataContext()
        {
			if (useDefaultConnectionString)
            	return new L2SNS.canyoucodeDb_LinqToSqlDataContext();
			else
				return new L2SNS.canyoucodeDb_LinqToSqlDataContext(this.connectionString);
        }
		
		public override EntityContext CreateNew()
		{
			if (useDefaultConnectionString)
            	return new Entities();
			else
				return new Entities(this.connectionString);
		}
		
		public IQueryable<Account> Account { get { return this.CreateQuery<Account>(); } }
		public IQueryable<User> User { get { return this.CreateQuery<User>(); } }
		public IQueryable<Company> Company { get { return this.CreateQuery<Company>(); } }
		public IQueryable<Project> Project { get { return this.CreateQuery<Project>(); } }
		public IQueryable<Portfolio> Portfolio { get { return this.CreateQuery<Portfolio>(); } }
		public IQueryable<PortfolioEntry> PortfolioEntry { get { return this.CreateQuery<PortfolioEntry>(); } }
  }
}
	
namespace canyoucode.Core
{
	public class AccountMapping : ModelEntityMapping<projectNS.Account, intermediateNS.Account, L2SNS.Account>
	{
		public AccountMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.User>(e => e.User, e => e.Account);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(AccountMapping))]
	public partial class Account : IModelEntity<intermediateNS.Account>	
	{
		private intermediateNS.Account __intermediateEntity;
		public intermediateNS.Account _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Account intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
			
		//Navigation Properties
		public User User 
		{	
			get { return _intermediateEntity.User.GetEntity(); }
			set { if (value != null) _intermediateEntity.User = value._intermediateEntity; else _intermediateEntity.User = null; }
		}
		public Account() : this(new intermediateNS.Account())
		{
		}
			
		public Account(intermediateNS.Account intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Account(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Account(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Account, pocoNS.Account>(info);
		}

		public static bool operator ==(Account a, Account b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Account a, Account b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Account)this)._equals(obj as Account);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Account ToPOCO()
		{
			return this.CreatePOCO<Account, pocoNS.Account>();
		}
	}
}

namespace canyoucode.Core.POCO
{
	[Serializable]
	public class Account : IPOCO<projectNS.Account>	{


		public long Id { get; set; }
		public POCOReference User { get; set; }

			
		public Account()
		{
		}
	}
}
	
namespace canyoucode.Core.Intermediate
{
	public class Account : IntermediateEntity<projectNS.Account, L2SNS.Account>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Account, intermediateNS.Account, L2SNS.Account, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.Account, projectNS.User, intermediateNS.Account, intermediateNS.User, L2SNS.Account, L2SNS.User> _user;
		public intermediateNS.User User
		{	
			get { return _user.Value; }
			set { _user.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Account()
		{
			__tableEntity = new L2SNS.Account();
			initFields();
		}
		
		public Account(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Account();
			initFields();
			
			this.Deserialize<projectNS.Account, Account, pocoNS.Account>(info);
			
		}
			
		public Account(L2SNS.Account tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Account, intermediateNS.Account, L2SNS.Account, long>(this, t => t.Id, (t, val) => t.Id = val);
			_user = new IntermediateEntityReference<projectNS.Account, projectNS.User, intermediateNS.Account, intermediateNS.User, L2SNS.Account, L2SNS.User>(this, __a => __a.User, (__a, __user) => __a.User = __user, __user => __user._account, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "User":
                	return _user.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.L2S
{
	partial class Account : ITableEntity<intermediateNS.Account>
	{
        public intermediateNS.Account _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Account;
		}
	}
}

namespace canyoucode.Core
{
	public class UserMapping : ModelEntityMapping<projectNS.User, intermediateNS.User, L2SNS.User>
	{
		public UserMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Account>(e => e.Account, e => e.User);
			AddRelationship<projectNS.Company>(e => e.Company, e => e.Users);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(UserMapping))]
	public partial class User : IModelEntity<intermediateNS.User>	
	{
		private intermediateNS.User __intermediateEntity;
		public intermediateNS.User _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.User intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long AccountId 
		{	
			get { return _intermediateEntity.AccountId; }
			set { _intermediateEntity.AccountId = value; }
		}
		public virtual long CompanyId 
		{	
			get { return _intermediateEntity.CompanyId; }
			set { _intermediateEntity.CompanyId = value; }
		}
			
		//Navigation Properties
		public Account Account 
		{	
			get { return _intermediateEntity.Account.GetEntity(); }
			set { if (value != null) _intermediateEntity.Account = value._intermediateEntity; else _intermediateEntity.Account = null; }
		}
		public Company Company 
		{	
			get { return _intermediateEntity.Company.GetEntity(); }
			set { if (value != null) _intermediateEntity.Company = value._intermediateEntity; else _intermediateEntity.Company = null; }
		}
		public User() : this(new intermediateNS.User())
		{
		}
			
		public User(intermediateNS.User intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public User(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.User(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<User, pocoNS.User>(info);
		}

		public static bool operator ==(User a, User b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(User a, User b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((User)this)._equals(obj as User);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.User ToPOCO()
		{
			return this.CreatePOCO<User, pocoNS.User>();
		}
	}
}

namespace canyoucode.Core.POCO
{
	[Serializable]
	public class User : IPOCO<projectNS.User>	{


		public long Id { get; set; }
		public long AccountId { get; set; }
		public long CompanyId { get; set; }
		public POCOReference Account { get; set; }

		public POCOReference Company { get; set; }

			
		public User()
		{
		}
	}
}
	
namespace canyoucode.Core.Intermediate
{
	public class User : IntermediateEntity<projectNS.User, L2SNS.User>
	{
		//Fields				
		public PrimaryKeyField<projectNS.User, intermediateNS.User, L2SNS.User, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.User, intermediateNS.User, L2SNS.User, long> _accountId;
		public long AccountId 
		{	
			get { return _accountId.Value; }
			set { _accountId.Value = value; }
		}
		public EntityField<projectNS.User, intermediateNS.User, L2SNS.User, long> _companyId;
		public long CompanyId 
		{	
			get { return _companyId.Value; }
			set { _companyId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.User, projectNS.Account, intermediateNS.User, intermediateNS.Account, L2SNS.User, L2SNS.Account> _account;
		public intermediateNS.Account Account
		{	
			get { return _account.Value; }
			set { _account.Value = value; }
		}
		public IntermediateEntityReference<projectNS.User, projectNS.Company, intermediateNS.User, intermediateNS.Company, L2SNS.User, L2SNS.Company> _company;
		public intermediateNS.Company Company
		{	
			get { return _company.Value; }
			set { _company.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public User()
		{
			__tableEntity = new L2SNS.User();
			initFields();
		}
		
		public User(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.User();
			initFields();
			
			this.Deserialize<projectNS.User, User, pocoNS.User>(info);
			
		}
			
		public User(L2SNS.User tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.User, intermediateNS.User, L2SNS.User, long>(this, t => t.Id, (t, val) => t.Id = val);
			_accountId = new EntityField<projectNS.User, intermediateNS.User, L2SNS.User, long>(this, t => t.AccountId, (t, val) => t.AccountId = val);
			_companyId = new EntityField<projectNS.User, intermediateNS.User, L2SNS.User, long>(this, t => t.CompanyId, (t, val) => t.CompanyId = val);
			_account = new IntermediateEntityReference<projectNS.User, projectNS.Account, intermediateNS.User, intermediateNS.Account, L2SNS.User, L2SNS.Account>(this, __u => __u.Account, (__u, __account) => __u.Account = __account, __account => __account._user, false);
			_company = new IntermediateEntityReference<projectNS.User, projectNS.Company, intermediateNS.User, intermediateNS.Company, L2SNS.User, L2SNS.Company>(this, __u => __u.Company, (__u, __company) => __u.Company = __company, __company => __company._users, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Account":
                	return _account.IsLoaded;
				case "Company":
                	return _company.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.L2S
{
	partial class User : ITableEntity<intermediateNS.User>
	{
        public intermediateNS.User _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.User;
		}
	}
}

namespace canyoucode.Core
{
	public class CompanyMapping : ModelEntityMapping<projectNS.Company, intermediateNS.Company, L2SNS.Company>
	{
		public CompanyMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.User>(e => e.Users, e => e.Company);
			AddRelationship<projectNS.Portfolio>(e => e.Portfolio, e => e.Company);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(CompanyMapping))]
	public partial class Company : IModelEntity<intermediateNS.Company>	
	{
		private intermediateNS.Company __intermediateEntity;
		public intermediateNS.Company _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Company intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual string Name 
		{	
			get { return _intermediateEntity.Name; }
			set { _intermediateEntity.Name = value; }
		}
		public virtual string Type 
		{	
			get { return _intermediateEntity.Type; }
			set { _intermediateEntity.Type = value; }
		}
		public virtual long PortfolioId 
		{	
			get { return _intermediateEntity.PortfolioId; }
			set { _intermediateEntity.PortfolioId = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.User> Users 
		{	
			get { return _intermediateEntity.Users.EntityCollection; }
		}		
		public Portfolio Portfolio 
		{	
			get { return _intermediateEntity.Portfolio.GetEntity(); }
			set { if (value != null) _intermediateEntity.Portfolio = value._intermediateEntity; else _intermediateEntity.Portfolio = null; }
		}
		public Company() : this(new intermediateNS.Company())
		{
		}
			
		public Company(intermediateNS.Company intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Company(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Company(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Company, pocoNS.Company>(info);
		}

		public static bool operator ==(Company a, Company b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Company a, Company b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Company)this)._equals(obj as Company);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Company ToPOCO()
		{
			return this.CreatePOCO<Company, pocoNS.Company>();
		}
	}
}

namespace canyoucode.Core.POCO
{
	[Serializable]
	public class Company : IPOCO<projectNS.Company>	{


		public long Id { get; set; }
		public string Name { get; set; }
		public string Type { get; set; }
		public long PortfolioId { get; set; }
		public POCOCollection Users { get; set; }

		public POCOReference Portfolio { get; set; }

			
		public Company()
		{
		}
	}
}
	
namespace canyoucode.Core.Intermediate
{
	public class Company : IntermediateEntity<projectNS.Company, L2SNS.Company>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Company, intermediateNS.Company, L2SNS.Company, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string> _name;
		public string Name 
		{	
			get { return _name.Value; }
			set { _name.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string> _type;
		public string Type 
		{	
			get { return _type.Value; }
			set { _type.Value = value; }
		}
		public EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, long> _portfolioId;
		public long PortfolioId 
		{	
			get { return _portfolioId.Value; }
			set { _portfolioId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityCollection<projectNS.Company, projectNS.User, intermediateNS.Company, intermediateNS.User, L2SNS.Company, L2SNS.User> _users;
		public IntermediateEntityCollection<projectNS.Company, projectNS.User, intermediateNS.Company, intermediateNS.User, L2SNS.Company, L2SNS.User> Users 
		{	
			get { return _users; }		
		}				
		public IntermediateEntityReference<projectNS.Company, projectNS.Portfolio, intermediateNS.Company, intermediateNS.Portfolio, L2SNS.Company, L2SNS.Portfolio> _portfolio;
		public intermediateNS.Portfolio Portfolio
		{	
			get { return _portfolio.Value; }
			set { _portfolio.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Company()
		{
			__tableEntity = new L2SNS.Company();
			initFields();
		}
		
		public Company(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Company();
			initFields();
			
			this.Deserialize<projectNS.Company, Company, pocoNS.Company>(info);
			
		}
			
		public Company(L2SNS.Company tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Company, intermediateNS.Company, L2SNS.Company, long>(this, t => t.Id, (t, val) => t.Id = val);
			_name = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string>(this, t => t.Name, (t, val) => t.Name = val);
			_type = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, string>(this, t => t.Type, (t, val) => t.Type = val);
			_portfolioId = new EntityField<projectNS.Company, intermediateNS.Company, L2SNS.Company, long>(this, t => t.PortfolioId, (t, val) => t.PortfolioId = val);
			_users = new IntermediateEntityCollection<projectNS.Company, projectNS.User, intermediateNS.Company, intermediateNS.User, L2SNS.Company, L2SNS.User>(this, __user => __user._company);
			_portfolio = new IntermediateEntityReference<projectNS.Company, projectNS.Portfolio, intermediateNS.Company, intermediateNS.Portfolio, L2SNS.Company, L2SNS.Portfolio>(this, __c => __c.Portfolio, (__c, __portfolio) => __c.Portfolio = __portfolio, __portfolio => __portfolio._company, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Users":
					return Users.IsLoaded;
				case "Portfolio":
                	return _portfolio.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.L2S
{
	partial class Company : ITableEntity<intermediateNS.Company>
	{
        public intermediateNS.Company _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Company;
		}
	}
}

namespace canyoucode.Core
{
	public class ProjectMapping : ModelEntityMapping<projectNS.Project, intermediateNS.Project, L2SNS.Project>
	{
		public ProjectMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(ProjectMapping))]
	public partial class Project : IModelEntity<intermediateNS.Project>	
	{
		private intermediateNS.Project __intermediateEntity;
		public intermediateNS.Project _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Project intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
			
		//Navigation Properties
		public Project() : this(new intermediateNS.Project())
		{
		}
			
		public Project(intermediateNS.Project intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Project(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Project(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Project, pocoNS.Project>(info);
		}

		public static bool operator ==(Project a, Project b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Project a, Project b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Project)this)._equals(obj as Project);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Project ToPOCO()
		{
			return this.CreatePOCO<Project, pocoNS.Project>();
		}
	}
}

namespace canyoucode.Core.POCO
{
	[Serializable]
	public class Project : IPOCO<projectNS.Project>	{


		public long Id { get; set; }
			
		public Project()
		{
		}
	}
}
	
namespace canyoucode.Core.Intermediate
{
	public class Project : IntermediateEntity<projectNS.Project, L2SNS.Project>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Project, intermediateNS.Project, L2SNS.Project, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}


		//Navigation Properties
		
		//Inherited Navigation Properties
						
		public Project()
		{
			__tableEntity = new L2SNS.Project();
			initFields();
		}
		
		public Project(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Project();
			initFields();
			
			this.Deserialize<projectNS.Project, Project, pocoNS.Project>(info);
			
		}
			
		public Project(L2SNS.Project tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Project, intermediateNS.Project, L2SNS.Project, long>(this, t => t.Id, (t, val) => t.Id = val);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.L2S
{
	partial class Project : ITableEntity<intermediateNS.Project>
	{
        public intermediateNS.Project _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Project;
		}
	}
}

namespace canyoucode.Core
{
	public class PortfolioMapping : ModelEntityMapping<projectNS.Portfolio, intermediateNS.Portfolio, L2SNS.Portfolio>
	{
		public PortfolioMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.PortfolioEntry>(e => e.PortfolioEntries, e => e.Portfolio);
			AddRelationship<projectNS.Company>(e => e.Company, e => e.Portfolio);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(PortfolioMapping))]
	public partial class Portfolio : IModelEntity<intermediateNS.Portfolio>	
	{
		private intermediateNS.Portfolio __intermediateEntity;
		public intermediateNS.Portfolio _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Portfolio intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.PortfolioEntry> PortfolioEntries 
		{	
			get { return _intermediateEntity.PortfolioEntries.EntityCollection; }
		}		
		public Company Company 
		{	
			get { return _intermediateEntity.Company.GetEntity(); }
			set { if (value != null) _intermediateEntity.Company = value._intermediateEntity; else _intermediateEntity.Company = null; }
		}
		public Portfolio() : this(new intermediateNS.Portfolio())
		{
		}
			
		public Portfolio(intermediateNS.Portfolio intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Portfolio(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Portfolio(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Portfolio, pocoNS.Portfolio>(info);
		}

		public static bool operator ==(Portfolio a, Portfolio b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Portfolio a, Portfolio b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Portfolio)this)._equals(obj as Portfolio);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Portfolio ToPOCO()
		{
			return this.CreatePOCO<Portfolio, pocoNS.Portfolio>();
		}
	}
}

namespace canyoucode.Core.POCO
{
	[Serializable]
	public class Portfolio : IPOCO<projectNS.Portfolio>	{


		public long Id { get; set; }
		public POCOCollection PortfolioEntries { get; set; }

		public POCOReference Company { get; set; }

			
		public Portfolio()
		{
		}
	}
}
	
namespace canyoucode.Core.Intermediate
{
	public class Portfolio : IntermediateEntity<projectNS.Portfolio, L2SNS.Portfolio>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Portfolio, intermediateNS.Portfolio, L2SNS.Portfolio, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityCollection<projectNS.Portfolio, projectNS.PortfolioEntry, intermediateNS.Portfolio, intermediateNS.PortfolioEntry, L2SNS.Portfolio, L2SNS.PortfolioEntry> _portfolioEntries;
		public IntermediateEntityCollection<projectNS.Portfolio, projectNS.PortfolioEntry, intermediateNS.Portfolio, intermediateNS.PortfolioEntry, L2SNS.Portfolio, L2SNS.PortfolioEntry> PortfolioEntries 
		{	
			get { return _portfolioEntries; }		
		}				
		public IntermediateEntityReference<projectNS.Portfolio, projectNS.Company, intermediateNS.Portfolio, intermediateNS.Company, L2SNS.Portfolio, L2SNS.Company> _company;
		public intermediateNS.Company Company
		{	
			get { return _company.Value; }
			set { _company.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Portfolio()
		{
			__tableEntity = new L2SNS.Portfolio();
			initFields();
		}
		
		public Portfolio(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Portfolio();
			initFields();
			
			this.Deserialize<projectNS.Portfolio, Portfolio, pocoNS.Portfolio>(info);
			
		}
			
		public Portfolio(L2SNS.Portfolio tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Portfolio, intermediateNS.Portfolio, L2SNS.Portfolio, long>(this, t => t.Id, (t, val) => t.Id = val);
			_portfolioEntries = new IntermediateEntityCollection<projectNS.Portfolio, projectNS.PortfolioEntry, intermediateNS.Portfolio, intermediateNS.PortfolioEntry, L2SNS.Portfolio, L2SNS.PortfolioEntry>(this, __portfolioentry => __portfolioentry._portfolio);
			_company = new IntermediateEntityReference<projectNS.Portfolio, projectNS.Company, intermediateNS.Portfolio, intermediateNS.Company, L2SNS.Portfolio, L2SNS.Company>(this, __p => __p.Company, (__p, __company) => __p.Company = __company, __company => __company._portfolio, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "PortfolioEntries":
					return PortfolioEntries.IsLoaded;
				case "Company":
                	return _company.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.L2S
{
	partial class Portfolio : ITableEntity<intermediateNS.Portfolio>
	{
        public intermediateNS.Portfolio _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Portfolio;
		}
	}
}

namespace canyoucode.Core
{
	public class PortfolioEntryMapping : ModelEntityMapping<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry>
	{
		public PortfolioEntryMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Portfolio>(e => e.Portfolio, e => e.PortfolioEntries);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(PortfolioEntryMapping))]
	public partial class PortfolioEntry : IModelEntity<intermediateNS.PortfolioEntry>	
	{
		private intermediateNS.PortfolioEntry __intermediateEntity;
		public intermediateNS.PortfolioEntry _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.PortfolioEntry intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long PortfolioId 
		{	
			get { return _intermediateEntity.PortfolioId; }
			set { _intermediateEntity.PortfolioId = value; }
		}
			
		//Navigation Properties
		public Portfolio Portfolio 
		{	
			get { return _intermediateEntity.Portfolio.GetEntity(); }
			set { if (value != null) _intermediateEntity.Portfolio = value._intermediateEntity; else _intermediateEntity.Portfolio = null; }
		}
		public PortfolioEntry() : this(new intermediateNS.PortfolioEntry())
		{
		}
			
		public PortfolioEntry(intermediateNS.PortfolioEntry intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public PortfolioEntry(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.PortfolioEntry(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<PortfolioEntry, pocoNS.PortfolioEntry>(info);
		}

		public static bool operator ==(PortfolioEntry a, PortfolioEntry b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(PortfolioEntry a, PortfolioEntry b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((PortfolioEntry)this)._equals(obj as PortfolioEntry);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.PortfolioEntry ToPOCO()
		{
			return this.CreatePOCO<PortfolioEntry, pocoNS.PortfolioEntry>();
		}
	}
}

namespace canyoucode.Core.POCO
{
	[Serializable]
	public class PortfolioEntry : IPOCO<projectNS.PortfolioEntry>	{


		public long Id { get; set; }
		public long PortfolioId { get; set; }
		public POCOReference Portfolio { get; set; }

			
		public PortfolioEntry()
		{
		}
	}
}
	
namespace canyoucode.Core.Intermediate
{
	public class PortfolioEntry : IntermediateEntity<projectNS.PortfolioEntry, L2SNS.PortfolioEntry>
	{
		//Fields				
		public PrimaryKeyField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, long> _portfolioId;
		public long PortfolioId 
		{	
			get { return _portfolioId.Value; }
			set { _portfolioId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.PortfolioEntry, projectNS.Portfolio, intermediateNS.PortfolioEntry, intermediateNS.Portfolio, L2SNS.PortfolioEntry, L2SNS.Portfolio> _portfolio;
		public intermediateNS.Portfolio Portfolio
		{	
			get { return _portfolio.Value; }
			set { _portfolio.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public PortfolioEntry()
		{
			__tableEntity = new L2SNS.PortfolioEntry();
			initFields();
		}
		
		public PortfolioEntry(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.PortfolioEntry();
			initFields();
			
			this.Deserialize<projectNS.PortfolioEntry, PortfolioEntry, pocoNS.PortfolioEntry>(info);
			
		}
			
		public PortfolioEntry(L2SNS.PortfolioEntry tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, long>(this, t => t.Id, (t, val) => t.Id = val);
			_portfolioId = new EntityField<projectNS.PortfolioEntry, intermediateNS.PortfolioEntry, L2SNS.PortfolioEntry, long>(this, t => t.PortfolioId, (t, val) => t.PortfolioId = val);
			_portfolio = new IntermediateEntityReference<projectNS.PortfolioEntry, projectNS.Portfolio, intermediateNS.PortfolioEntry, intermediateNS.Portfolio, L2SNS.PortfolioEntry, L2SNS.Portfolio>(this, __p => __p.Portfolio, (__p, __portfolio) => __p.Portfolio = __portfolio, __portfolio => __portfolio._portfolioEntries, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Portfolio":
                	return _portfolio.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace canyoucode.Core.L2S
{
	partial class PortfolioEntry : ITableEntity<intermediateNS.PortfolioEntry>
	{
        public intermediateNS.PortfolioEntry _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.PortfolioEntry;
		}
	}
}


